.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::PerlySense::Editor 3pm"
.TH Devel::PerlySense::Editor 3pm "2012-12-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::PerlySense::Editor \- Integration with editors
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "oPerlySense"
.IX Subsection "oPerlySense"
Devel::PerlySense object.
.PP
Default: set during \fInew()\fR
.SS "widthDisplay"
.IX Subsection "widthDisplay"
The width of the display in columns, or undef if N/A.
.PP
Default: undef
.SS "raClassOverviewShowDefault"
.IX Subsection "raClassOverviewShowDefault"
Names of features to show in the class overview by default.
.PP
Default: { ... }
.SS "raClassOverviewShow"
.IX Subsection "raClassOverviewShow"
Names of features to allow being show in the class overview.
.PP
Default: { ... }
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "\fIdirExtenal()\fP"
.IX Subsection "dirExtenal()"
Return the absolute directory of the external editor files.
.SS "new(oPerlySense, widthDisplay = undef)"
.IX Subsection "new(oPerlySense, widthDisplay = undef)"
Create new Emcacs object.
.SH "METHODS"
.IX Header "METHODS"
.SS "classOverview(oClass)"
.IX Subsection "classOverview(oClass)"
Return string representing the Class Overview of \f(CW$oClass\fR.
.SS "textClassInheritance(oClass)"
.IX Subsection "textClassInheritance(oClass)"
Return string representing the class hierarchy of \f(CW$oClass\fR.
.SS "textClassNeighbourhood(oClass)"
.IX Subsection "textClassNeighbourhood(oClass)"
Return string representing the neighbourhood of \f(CW$oClass\fR.
.SS "textClassUses(oClass)"
.IX Subsection "textClassUses(oClass)"
Return string representing the modules used by \f(CW$oClass\fR. Use the least
number of columns to display this.
.ie n .SS "textTable($raItem, $columnWidthMax, [$rsRenderItem = string\-as\-is])"
.el .SS "textTable($raItem, \f(CW$columnWidthMax\fP, [$rsRenderItem = string\-as\-is])"
.IX Subsection "textTable($raItem, $columnWidthMax, [$rsRenderItem = string-as-is])"
Return string with the items in \f(CW$raItem\fR rendered as a table, with as
few columns as possible.
.PP
If the \f(CW$rsRenderItem\fR sub ref is passed, it is called for each item to
be rendered:
.PP
.Vb 1
\&  $rsRenderItem\->($stringItem, $rsItemColumn)
.Ve
.PP
where \f(CW$stringItem\fR is each individual item, and \f(CW$rsItemColumn\fR is the
items in the current column. The default is to just pass through the
\&\f(CW$stringItem\fR text.
.SS "textClassBookmarks(oClass)"
.IX Subsection "textClassBookmarks(oClass)"
Return string representing the Bookmarks of \f(CW$oClass\fR.
.SS "textClassStructure(oClass)"
.IX Subsection "textClassStructure(oClass)"
Return string representing the structure of \f(CW$oClass\fR.
.PP
This includes a Signature Survey string.
.SS "textClassApi(oClass)"
.IX Subsection "textClassApi(oClass)"
Return string representing the \s-1API\s0 of \f(CW$oClass\fR.
.SS "textLineWrapped($text)"
.IX Subsection "textLineWrapped($text)"
Return \f(CW$text\fR wrapped hard at the available number of columns.
.ie n .SS "raItemInNGroups($raItem, $countGroup)"
.el .SS "raItemInNGroups($raItem, \f(CW$countGroup\fP)"
.IX Subsection "raItemInNGroups($raItem, $countGroup)"
Split up the items in \f(CW$raItem\fR so that they form at most \f(CW$countGroup\fR
array refs.
.PP
The items are evenly distributed between the group with the same numer
of items in each, except for the last one which may contain fewer
items.
.PP
Return array ref with \f(CW$countGroup\fR items, each of which is an array ref
with the elements in \f(CW$raItem\fR.
.SS "textCompactGraph(text)"
.IX Subsection "textCompactGraph(text)"
Return compact version of \f(CW$text\fR.
.SS "formatOutputDataStructure(rhData)"
.IX Subsection "formatOutputDataStructure(rhData)"
Return stringification of \f(CW$rhData\fR suited for the Editor.
.SS "formatOutputItem($item)"
.IX Subsection "formatOutputItem($item)"
Return stringification of \f(CW$item\fR suited for the Editor. \f(CW$item\fR can be a
scalar, array ref or hash ref.
.SS "renameIdentifier($identifier)"
.IX Subsection "renameIdentifier($identifier)"
Return \f(CW$identifier\fR changed to suit the Editor.
.PP
Default is to do nothing.
.SS "stripTrailingWhitespace($string)"
.IX Subsection "stripTrailingWhitespace($string)"
Return \f(CW$string\fR with each line in \f(CW$string\fR stripped of trailing
whitespace.
.SH "AUTHOR"
.IX Header "AUTHOR"
Johan Lindstro\*:m, \f(CW\*(C`<johanl[A\*:T]DarSerMan.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-devel\-perlysense@rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel\-PerlySense <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel-PerlySense>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Johan Lindstro\*:m, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

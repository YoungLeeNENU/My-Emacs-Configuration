.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::PerlySense::Cookbook 3pm"
.TH Devel::PerlySense::Cookbook 3pm "2012-12-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::PerlySense::Cookbook \-\- simple solutions to common issues
.SH "COMMON PROBLEMS"
.IX Header "COMMON PROBLEMS"
.SS "Weird characters in the *compilation* buffer when running tests"
.IX Subsection "Weird characters in the *compilation* buffer when running tests"
You probably use a recent version of Test::Harness or something. It
has nice colorized output as default. Which doesn't look so good in
the not-so-ansi-color-aware buffer.
.PP
Change your Project Config for running files to
.PP
.Vb 1
\&  prove \-\-nocolor
.Ve
.SH "CONVENIENT TRICKS"
.IX Header "CONVENIENT TRICKS"
.SS "Highlight Catalyst/DBIC setup code"
.IX Subsection "Highlight Catalyst/DBIC setup code"
Add this
.PP
.Vb 4
\&  \-
\&    moniker: "Package method calls (Cat/DBIC)"
\&    rex:
\&      \- qr/ _\|_PACKAGE_\|_ \es* \-> \es* ( [\ew]+ .* ) /x
.Ve
.PP
to the Bookmarks section in your Project Config.  It will highlight things like
.PP
.Vb 1
\&  _\|_PACKAGE_\|_\->table("cust");
.Ve
.PP
These declarations are part of what defines the class, and so are very
useful to see in the Class Overview.
.SS "Configure Run to run your unusual test files"
.IX Subsection "Configure Run to run your unusual test files"
If you look in the config file in .PerlySense/project.yml (run
\&\f(CW\*(C`perly_sense create_project\*(C'\fR to create one) you'll see that the
action to take when running different sorts of files is entirely
configurable.
.PP
The default configuration for .t files look like this:
.PP
.Vb 7
\&    run_file:
\&      \-
\&        command: "prove  \-\-norc \-\-nocolor \-v ${INC} \e"${SOURCE_FILE}\e""
\&        alternate_command: ""
\&        moniker: Test
\&        rex: \e.t$
\&        run_from: source_root_directory
.Ve
.PP
You can define what to do with tests specific to your project. Just
put extra mappings in the list. First match is used.
.PP
You can also use whatever you have configured in the
\&\*(L"alternate_command\*(R" by doing calling Run File with a prefix argument,
i.e. \f(CW\*(C`C\-u C\-o C\-r\*(C'\fR.
.PP
You can do the same in the debug section to run the files through a
debugged Perl with \f(CW\*(C`C\-o r d\*(C'\fR or \f(CW\*(C`C\-u C\-o r d\*(C'\fR.
.PP
\fIRun Test::Class classes with C\-o C\-r\fR
.IX Subsection "Run Test::Class classes with C-o C-r"
.PP
Let's say you have Test::Class test modules under
\&\f(CW\*(C`t/classes/Test\*(C'\fR.  When you type \f(CW\*(C`C\-o C\-r\*(C'\fR you want to run them
through prove, just like ordinary .t file.
.PP
Before the normal .pm spec, add this:
.PP
.Vb 5
\&  \-
\&    command: "prove  \-\-norc \-\-nocolor \-v ${INC} \e"${SOURCE_FILE}\e""
\&    moniker: Test
\&    rex: t/classes/Test/.*?\e.pm$
\&    run_from: source_root_directory
.Ve
.PP
\fIRun yaml files through a custom test framework\fR
.IX Subsection "Run yaml files through a custom test framework"
.PP
Let's say you have a custom test framework that uses yaml file
configuration files to drive the tests. In the shell they are run like this:
.PP
.Vb 1
\&  prove \-v t/acceptance.t :: "t/acceptance/user/user\-can\-log\-in.yml"
.Ve
.PP
Add this:
.PP
.Vb 5
\&  \-
\&    command: "prove  \-\-norc \-\-nocolor \-v ${INC} t/acceptance.t :: \e"${SOURCE_FILE}\e""
\&    moniker: Test
\&    rex: t/acceptance/.*?\e.yml$
\&    run_from: source_root_directory
.Ve
.PP
Now you can edit your yaml file and type C\-o C\-r to run the acceptance
test, just like you normally do with .t files.

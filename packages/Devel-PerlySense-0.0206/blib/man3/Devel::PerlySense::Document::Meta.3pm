.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::PerlySense::Document::Meta 3pm"
.TH Devel::PerlySense::Document::Meta 3pm "2012-12-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::PerlySense::Document::Meta \- Document information generated
during a parse
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "raPackage"
.IX Subsection "raPackage"
Package declarations.
.PP
Array ref with cloned PPI::Statement::Package objects.
.PP
Default: []
.SS "raNameModuleUse"
.IX Subsection "raNameModuleUse"
Array ref with module names that are \*(L"use\*(R"d.
.PP
Default: []
.SS "raNameModuleBase"
.IX Subsection "raNameModuleBase"
Array ref with module names that are base classes.
.PP
Default: []
.SS "rhRowColModule"
.IX Subsection "rhRowColModule"
Module names.
.PP
Hash ref with (keys: row, values:
  hash ref with (keys: col, values:
    hash with keys:
      oNode => cloned PPI::Node objects
      module => module name string
    )
  )
)
.PP
rhRowColModule\->{43}\->{2}\-> node
.PP
Default: {}
.SS "rhRowColMethod"
.IX Subsection "rhRowColMethod"
Method calls.
.PP
Hash ref with (keys: row, values:
  hash ref with (keys: col, values:
    {
    oNode => cloned PPI::Node object,
    oNodePrev => node to the left of the \->
    }
  )
)
.PP
rhRowColModule\->{43}\->{2}\-> node
.PP
Default: {}
.SS "raLocationPod"
.IX Subsection "raLocationPod"
\&\s-1POD\s0 blocks.
.PP
Array ref with Location objects, representing each pod chunk that is a
heading/item. They have the following properties:
.PP
.Vb 2
\&  podSection
\&  pod
.Ve
.PP
Default: []
.SS "raLocationSub"
.IX Subsection "raLocationSub"
sub definition.
.PP
Array ref with Location objects, representing each sub
declaration. They have the following properties:
.PP
.Vb 4
\&  nameSub
\&  source
\&  namePackage
\&  oLocationEnd
.Ve
.PP
Default: []
.SS "aPluginSyntax"
.IX Subsection "aPluginSyntax"
Array ref with Devel::PerlySense::Plugin::Syntax objects.
.PP
Return whatever plugins under Devel::PerlySense::Plugin::Syntax::* are
found.
.PP
Readonly.
.SH "API METHODS"
.IX Header "API METHODS"
.SS "\fInew()\fP Create new empty Meta object"
.IX Subsection "new() Create new empty Meta object"
.SS "parse($oDocument)"
.IX Subsection "parse($oDocument)"
Parse the Devel::PerlySense::Document and extract metadata. Fill
appropriate data structures.
.PP
Return 1 or die on errors.
.ie n .SS "moduleAt(row => $row, col => $col)"
.el .SS "moduleAt(row => \f(CW$row\fP, col => \f(CW$col\fP)"
.IX Subsection "moduleAt(row => $row, col => $col)"
Find the module mentioned on line \f(CW$row\fR (1..) at \f(CW$col\fR (1..).
.PP
Return string like \*(L"My::Module\*(R" or \*(L"Module\*(R", or undef if none was
found.
.ie n .SS "rhMethodAt(row => $row, col => $col)"
.el .SS "rhMethodAt(row => \f(CW$row\fP, col => \f(CW$col\fP)"
.IX Subsection "rhMethodAt(row => $row, col => $col)"
Find the module mentioned on line \f(CW$row\fR (1..) at \f(CW$col\fR (1..).
.PP
Return hash ref with { oNode, oNodeObject } or undef if none was
found.
.ie n .SS "rhTokenOfAt($rhRowCol, $row, $col)"
.el .SS "rhTokenOfAt($rhRowCol, \f(CW$row\fP, \f(CW$col\fP)"
.IX Subsection "rhTokenOfAt($rhRowCol, $row, $col)"
Find the token mentioned in \f(CW$rhRowCol\fR on line \f(CW$row\fR (1..) at \f(CW$col\fR (1..).
.PP
Return hash ref with keys oNode and possibly oNodeObject, or undef if
none was found.
.ie n .SS "parsePod($oDocument, $oNode, $raLocationPod, $raPodHeadingCurrent)"
.el .SS "parsePod($oDocument, \f(CW$oNode\fP, \f(CW$raLocationPod\fP, \f(CW$raPodHeadingCurrent\fP)"
.IX Subsection "parsePod($oDocument, $oNode, $raLocationPod, $raPodHeadingCurrent)"
Parse \f(CW$oNode\fR and add one or more Location objects to \f(CW$raLocationPod\fR.
.PP
Add pod chunks that are =head or =item. Prefix the pod chunks with
their immediate pod heading level.
.PP
Return 1 on success, die on errors.
.ie n .SS "oLocationSub($oDocument, $oNode, $nameSub, $packageCurrent)"
.el .SS "oLocationSub($oDocument, \f(CW$oNode\fP, \f(CW$nameSub\fP, \f(CW$packageCurrent\fP)"
.IX Subsection "oLocationSub($oDocument, $oNode, $nameSub, $packageCurrent)"
Create a Document::Location object from the sub \f(CW$nameSub\fR consisting of
\&\f(CW$oNode\fR, found in \f(CW$oDocument\fR in \f(CW$packageCurrent\fR.
.PP
Set appropriate Location\->rhProperty keys:
.PP
.Vb 4
\&  nameSub
\&  source
\&  namePackage
\&  oLocationEnd
.Ve
.PP
Return the new Location object.
.SH "AUTHOR"
.IX Header "AUTHOR"
Johan Lindstro\*:m, \f(CW\*(C`<johanl[A\*:T]DarSerMan.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-devel\-perlysense@rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel\-PerlySense <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel-PerlySense>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Johan Lindstro\*:m, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

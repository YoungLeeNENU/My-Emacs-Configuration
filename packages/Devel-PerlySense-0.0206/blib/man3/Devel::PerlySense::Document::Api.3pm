.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Devel::PerlySense::Document::Api 3pm"
.TH Devel::PerlySense::Document::Api 3pm "2012-12-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Devel::PerlySense::Document::Api \- The methods (and their locations)
of a package
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \s-1API\s0 is the methods/subs a module/package supports (or in some cases
_may_ support).
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "rhSub"
.IX Subsection "rhSub"
Hash ref with (keys: method/sub name; values: Document::Location objects).
.PP
Default: {}
.PP
The Location objects have a \f(CW\*(C`sub\*(C'\fR property which is the name of the
sub.
.SH "API METHODS"
.IX Header "API METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
Create new Api object.
.ie n .SS "aNameSubVisible(oPerlySense => $oPs, fileCurrent => $file)"
.el .SS "aNameSubVisible(oPerlySense => \f(CW$oPs\fP, fileCurrent => \f(CW$file\fP)"
.IX Subsection "aNameSubVisible(oPerlySense => $oPs, fileCurrent => $file)"
Return array with the method/sub names in the interface that are
visible.
.PP
A method is invisible if it's a private method in a base class of
\&\f(CW$fileCurrent\fR, outside the current Project, according to
\&\f(CW$oPerlySense\fR.
.ie n .SS "isSubVisible($oPerlySense, $fileCurrent, $nameSub)"
.el .SS "isSubVisible($oPerlySense, \f(CW$fileCurrent\fP, \f(CW$nameSub\fP)"
.IX Subsection "isSubVisible($oPerlySense, $fileCurrent, $nameSub)"
Return true if the Sub name is visibl, else false.
.PP
A sub/method is invisible if it's a private method in a base class of
\&\f(CW$fileCurrent\fR, outside the current Project, according to \f(CW$oPerlySense\fR.
.SS "rsSortSub($fileCurrent)"
.IX Subsection "rsSortSub($fileCurrent)"
Return sub ref for sorting sub names of this Api, using the rhSub
property and given the \f(CW$fileCurrent\fR.
.ie n .SS "parsePackageSetSub(raNodeSub => $raNodeSub, source => $source, oDocument => $oDocument)"
.el .SS "parsePackageSetSub(raNodeSub => \f(CW$raNodeSub\fP, source => \f(CW$source\fP, oDocument => \f(CW$oDocument\fP)"
.IX Subsection "parsePackageSetSub(raNodeSub => $raNodeSub, source => $source, oDocument => $oDocument)"
Parse the entire package data, both \f(CW$source\fR and found method
nodes. Add both found subs and \f(CW$raNodeSub\fR to the rhSub property.
.PP
Return 1 or die on errors.
.ie n .SS "parseSourceSetSub(source => $source, oDocument => $oDocument)"
.el .SS "parseSourceSetSub(source => \f(CW$source\fP, oDocument => \f(CW$oDocument\fP)"
.IX Subsection "parseSourceSetSub(source => $source, oDocument => $oDocument)"
Parse the \f(CW$source\fR, looking for \f(CW$self\fR\->method calls, and
\&\f(CW$self\fR\->{hash_key}, and add them to the rhSub property.
.PP
Return 1 or die on errors.
.ie n .SS "oLocationSetSub(nameSub => $nameSub, oDocument => $oDocument, [oNode => $oNode])"
.el .SS "oLocationSetSub(nameSub => \f(CW$nameSub\fP, oDocument => \f(CW$oDocument\fP, [oNode => \f(CW$oNode\fP])"
.IX Subsection "oLocationSetSub(nameSub => $nameSub, oDocument => $oDocument, [oNode => $oNode])"
Set the \f(CW$self\fR\->rhSub\->{$nameSub} to a new Document::Location with
\&\f(CW$oDocument\fR and possibly a row/col for \f(CW$oNode\fR. Set the rhProperty for:
.PP
.Vb 1
\&  sub
.Ve
.PP
If no \f(CW$oNode\fR is passed, the location is supposed to be unknown, with
row/col: 0/0.
.PP
Return the new oLocation. Die on errors.
.SS "mergeWithBase($oApiBase)"
.IX Subsection "mergeWithBase($oApiBase)"
Adjust this object by adding appropriate parts of \f(CW$oApiBase\fR, i.e. the
methods in \f(CW$oApiBase\fR\->rhSub that aren't overridden in this class.
.PP
If a method has no row/col in neither base or self, it's supposed to
be defined in the base class. Any method definition with row/col in
self overrides one in base.
.PP
Return 1 on success. Die on errors.
.SS "isSubSupported($nameSub)"
.IX Subsection "isSubSupported($nameSub)"
Return true if \f(CW$nameSub\fR is supported by this \s-1API\s0, else false.
.SS "percentSupportedOf($raNameSub)"
.IX Subsection "percentSupportedOf($raNameSub)"
Return percent (0..100) of how many of the sub names in raNameSub that
are present in the api.
.SS "percentConsistsOf($raNameSub)"
.IX Subsection "percentConsistsOf($raNameSub)"
Return percent (0..100) of how much of the api consists of the sub
names in raNameSub.
.PP
I.e. a large \s-1API\s0 will have a low percentage. Extra sub names in
\&\f(CW$raNameSub\fR will not affect the percentage.
.SH "AUTHOR"
.IX Header "AUTHOR"
Johan Lindstro\*:m, \f(CW\*(C`<johanl[A\*:T]DarSerMan.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-devel\-perlysense@rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel\-PerlySense <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Devel-PerlySense>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Johan Lindstro\*:m, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

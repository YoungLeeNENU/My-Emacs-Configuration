;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables (list 
   (semanticdb-table "os.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("sys" include nil nil [1169 1186])
            ("errno" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
    :file "os.py"
    :pointmax 25770
    :fsize 25769
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "random.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 3881])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3899 3903]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3886 4055])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4073 4077])
                            ("state" variable nil (reparse-symbol function_parameters) [4079 4084]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4060 5122])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145])
                            ("n" variable nil (reparse-symbol function_parameters) [5147 5148]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5127 5688])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5912 5916]))                          )
                        (reparse-symbol indented_block_body) [5895 5963])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5985 5989])
                            ("state" variable nil (reparse-symbol function_parameters) [5991 5996]))                          )
                        (reparse-symbol indented_block_body) [5968 6042])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6062 6066]))                          )
                        (reparse-symbol indented_block_body) [6047 6120])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6201 6205])
                            ("start" variable nil (reparse-symbol function_parameters) [6207 6212])
                            ("stop" variable nil (reparse-symbol function_parameters) [6214 6218])
                            ("step" variable nil (reparse-symbol function_parameters) [6225 6229])
                            ("int" variable nil (reparse-symbol function_parameters) [6233 6236])
                            ("default" variable nil (reparse-symbol function_parameters) [6242 6249])
                            ("maxwidth" variable nil (reparse-symbol function_parameters) [6274 6282]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.
        Do not supply the 'int', 'default', and 'maxwidth' arguments.
        ")
                        (reparse-symbol indented_block_body) [6187 8865])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8882 8886])
                            ("a" variable nil (reparse-symbol function_parameters) [8888 8889])
                            ("b" variable nil (reparse-symbol function_parameters) [8891 8892]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8870 9023])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9043 9047])
                            ("n" variable nil (reparse-symbol function_parameters) [9049 9050])
                            ("_log" variable nil (reparse-symbol function_parameters) [9052 9056])
                            ("int" variable nil (reparse-symbol function_parameters) [9063 9066])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9072 9081])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9110 9117])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9131 9145]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9028 10182])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10261 10265])
                            ("seq" variable nil (reparse-symbol function_parameters) [10267 10270]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10250 10425])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10442 10446])
                            ("x" variable nil (reparse-symbol function_parameters) [10448 10449])
                            ("random" variable nil (reparse-symbol function_parameters) [10451 10457])
                            ("int" variable nil (reparse-symbol function_parameters) [10464 10467]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.
        ")
                        (reparse-symbol indented_block_body) [10430 10954])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10970 10974])
                            ("population" variable nil (reparse-symbol function_parameters) [10976 10986])
                            ("k" variable nil (reparse-symbol function_parameters) [10988 10989]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10959 13789])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13944 13948])
                            ("a" variable nil (reparse-symbol function_parameters) [13950 13951])
                            ("b" variable nil (reparse-symbol function_parameters) [13953 13954]))                          )
                        (reparse-symbol indented_block_body) [13932 14081])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14158 14162])
                            ("low" variable nil (reparse-symbol function_parameters) [14164 14167])
                            ("high" variable nil (reparse-symbol function_parameters) [14173 14177])
                            ("mode" variable nil (reparse-symbol function_parameters) [14183 14187]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14143 14672])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14761 14765])
                            ("mu" variable nil (reparse-symbol function_parameters) [14767 14769])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14771 14776]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14743 15436])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15529 15533])
                            ("mu" variable nil (reparse-symbol function_parameters) [15535 15537])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15539 15544]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15510 15864])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15956 15960])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15962 15967]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15940 16581])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16675 16679])
                            ("mu" variable nil (reparse-symbol function_parameters) [16681 16683])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16685 16690]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16655 18108])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18195 18199])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18201 18206])
                            ("beta" variable nil (reparse-symbol function_parameters) [18208 18212]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18178 20402])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20490 20494])
                            ("mu" variable nil (reparse-symbol function_parameters) [20496 20498])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20500 20505]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20480 21816])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22312 22316])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22318 22323])
                            ("beta" variable nil (reparse-symbol function_parameters) [22325 22329]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22296 22787])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22863 22867])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22869 22874]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22845 23039])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23117 23121])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23123 23128])
                            ("beta" variable nil (reparse-symbol function_parameters) [23130 23134]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23098 23386]))                  
                :type "class")
                nil [2273 23386])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23479 23490])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23537 23541])
                            ("a" variable nil (reparse-symbol function_parameters) [23543 23544]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23528 24552])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24568 24572]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24557 25624])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25642 25646]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25629 25778])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25796 25800])
                            ("state" variable nil (reparse-symbol function_parameters) [25802 25807]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25783 26189])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26208 26212])
                            ("n" variable nil (reparse-symbol function_parameters) [26214 26215]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26194 26957])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26975 26979])
                            ("x" variable nil (reparse-symbol function_parameters) [26981 26982])
                            ("y" variable nil (reparse-symbol function_parameters) [26986 26987])
                            ("z" variable nil (reparse-symbol function_parameters) [26991 26992]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26962 27761])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27777 27781])
                            ("a" variable nil (reparse-symbol function_parameters) [27783 27784]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27766 28465]))                  
                :type "class")
                nil [23446 28465])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28813 28817]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28802 28952])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28973 28977])
                            ("k" variable nil (reparse-symbol function_parameters) [28979 28980]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28957 29432])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29447 29451])
                            ("args" variable nil (reparse-symbol function_parameters) [29453 29458])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29460 29466]))                          )
                        (reparse-symbol indented_block_body) [29437 29560])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29564 29588])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29614 29618])
                            ("args" variable nil (reparse-symbol function_parameters) [29620 29625])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29627 29633]))                          )
                        (reparse-symbol indented_block_body) [29594 29792])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29796 29833]))                  
                :type "class")
                nil [28537 29834])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29914 29915])
                ("func" variable nil (reparse-symbol function_parameters) [29917 29921])
                ("args" variable nil (reparse-symbol function_parameters) [29923 29927]))              ) nil [29894 30448])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30460 30461]))              ) nil [30450 31248])
            ("_inst" variable nil nil [31580 31596])
            ("seed" variable nil nil [31597 31614])
            ("random" variable nil nil [31615 31636])
            ("uniform" variable nil nil [31637 31660])
            ("triangular" variable nil nil [31661 31690])
            ("randint" variable nil nil [31691 31714])
            ("choice" variable nil nil [31715 31736])
            ("randrange" variable nil nil [31737 31764])
            ("sample" variable nil nil [31765 31786])
            ("shuffle" variable nil nil [31787 31810])
            ("normalvariate" variable nil nil [31811 31846])
            ("lognormvariate" variable nil nil [31847 31884])
            ("expovariate" variable nil nil [31885 31916])
            ("vonmisesvariate" variable nil nil [31917 31956])
            ("gammavariate" variable nil nil [31957 31990])
            ("gauss" variable nil nil [31991 32010])
            ("betavariate" variable nil nil [32011 32042])
            ("paretovariate" variable nil nil [32043 32078])
            ("weibullvariate" variable nil nil [32079 32116])
            ("getstate" variable nil nil [32117 32142])
            ("setstate" variable nil nil [32143 32168])
            ("jumpahead" variable nil nil [32169 32196])
            ("getrandbits" variable nil nil [32197 32228])
            ("if" code nil nil [32230 32269]))          
    :file "random.py"
    :pointmax 32269
    :fsize 32268
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((NAME 14464 . 14465) (IF 14472 . 14474) (ELSE 14488 . 14492))
    )
   (semanticdb-table "copy_reg.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
    :file "copy_reg.py"
    :pointmax 6801
    :fsize 6800
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "__future__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
    :file "__future__.py"
    :pointmax 4381
    :fsize 4380
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "warnings.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
    :file "warnings.py"
    :pointmax 14045
    :fsize 14044
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430))
    )
   (semanticdb-table "types.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
    :file "types.py"
    :pointmax 2041
    :fsize 2040
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "hashlib.py"
    :major-mode 'python-mode
    :tags 
        '( ("__doc__" variable nil nil [122 2057])
            ("__always_supported" variable nil nil [2169 2245])
            ("algorithms" variable nil nil [2247 2278])
            ("__all__" code nil nil [2280 2332])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2365 2369]))              ) nil [2335 3203])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3235 3239]))              ) nil [3205 3612])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3627 3631])
                    ("string" variable nil (reparse-symbol function_parameters) [3633 3639]))                  )
                nil [3614 3831])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3848 3852])
                    ("string" variable nil (reparse-symbol function_parameters) [3854 3860]))                  )
                nil [3833 4393])
            ("try" code nil nil [4395 4566])
            ("for" code nil nil [4567 4894])
            ("del" code nil nil [4914 4961])
            ("del" code nil nil [4962 5013]))          
    :file "hashlib.py"
    :pointmax 5014
    :fsize 5013
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "linecache.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4119]))          
    :file "linecache.py"
    :pointmax 4119
    :fsize 4118
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "threading.py"
    :file "threading.py"
    :fsize 32668
    :lastmodtime '(21263 40994 0 0)
    )
   (semanticdb-table "struct.py"
    :major-mode 'python-mode
    :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
    :file "struct.py"
    :pointmax 83
    :fsize 82
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "collections.py"
    :major-mode 'python-mode
    :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 379])
            ("keyword" include nil nil [380 423])
            ("sys" include nil nil [424 442])
            ("heapq" include nil nil [443 465])
            ("itertools" include nil nil [466 543])
            ("try" code nil nil [545 670])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [880 923])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1532 1735])
                            ("if" code nil (reparse-symbol indented_block_body) [1744 1842])
                            ("try" code nil (reparse-symbol indented_block_body) [1850 2051])
                            ("self" code nil (reparse-symbol indented_block_body) [2059 2087]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1502 1506])
                            ("args" variable nil (reparse-symbol function_parameters) [1508 1513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1515 1521]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1489 2088])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2109 2113])
                            ("key" variable nil (reparse-symbol function_parameters) [2115 2118])
                            ("value" variable nil (reparse-symbol function_parameters) [2120 2125])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2127 2131])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2135 2139])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2143 2155]))                          )
                        (reparse-symbol indented_block_body) [2093 2579])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604])
                            ("key" variable nil (reparse-symbol function_parameters) [2606 2609])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2611 2615])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2619 2623])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2627 2639]))                          )
                        (reparse-symbol indented_block_body) [2584 3022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3040 3044]))                          )
                        (reparse-symbol indented_block_body) [3027 3298])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3320 3324]))                          )
                        (reparse-symbol indented_block_body) [3303 3594])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3609 3613]))                          )
                        (reparse-symbol indented_block_body) [3599 3858])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951]))                          )
                        (reparse-symbol indented_block_body) [3938 4022])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4038 4042]))                          )
                        (reparse-symbol indented_block_body) [4027 4134])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4149 4153]))                          )
                        (reparse-symbol indented_block_body) [4139 4263])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4281 4285]))                          )
                        (reparse-symbol indented_block_body) [4268 4373])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4393 4397]))                          )
                        (reparse-symbol indented_block_body) [4378 4510])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4529 4533]))                          )
                        (reparse-symbol indented_block_body) [4515 4662])
                    ("update" variable nil (reparse-symbol indented_block_body) [4667 4697])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4703 4720])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [4785 4804])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4818 4822])
                            ("key" variable nil (reparse-symbol function_parameters) [4824 4827])
                            ("default" variable nil (reparse-symbol function_parameters) [4829 4836]))                          )
                        (reparse-symbol indented_block_body) [4810 5240])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5260 5264])
                            ("key" variable nil (reparse-symbol function_parameters) [5266 5269])
                            ("default" variable nil (reparse-symbol function_parameters) [5271 5278]))                          )
                        (reparse-symbol indented_block_body) [5245 5469])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5486 5490])
                            ("last" variable nil (reparse-symbol function_parameters) [5492 5496]))                          )
                        (reparse-symbol indented_block_body) [5474 5858])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5876 5880])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [5882 5895]))                          )
                        (reparse-symbol indented_block_body) [5863 6304])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6324 6328]))                          )
                        (reparse-symbol indented_block_body) [6309 6654])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6668 6672]))                          )
                        (reparse-symbol indented_block_body) [6659 6755])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6790 6793])
                            ("iterable" variable nil (reparse-symbol function_parameters) [6795 6803])
                            ("value" variable nil (reparse-symbol function_parameters) [6805 6810]))                          )
                        (reparse-symbol indented_block_body) [6760 7060])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7076 7080])
                            ("other" variable nil (reparse-symbol function_parameters) [7082 7087]))                          )
                        (reparse-symbol indented_block_body) [7065 7410])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7426 7430])
                            ("other" variable nil (reparse-symbol function_parameters) [7432 7437]))                          )
                        (reparse-symbol indented_block_body) [7415 7507])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7602 7606]))                          )
                        (reparse-symbol indented_block_body) [7589 7714])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7734 7738]))                          )
                        (reparse-symbol indented_block_body) [7719 7844])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7863 7867]))                          )
                        (reparse-symbol indented_block_body) [7849 7978]))                  
                :type "class")
                nil [851 7978])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [8173 8181])
                    ("field_names" variable nil (reparse-symbol function_parameters) [8183 8194])
                    ("verbose" variable nil (reparse-symbol function_parameters) [8196 8203])
                    ("rename" variable nil (reparse-symbol function_parameters) [8211 8217]))                  )
                nil [8158 13490])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [13677 15378])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [15763 16290])
                            ("super" code nil (reparse-symbol indented_block_body) [16299 16330])
                            ("self" code nil (reparse-symbol indented_block_body) [16339 16368]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15725 15729])
                            ("iterable" variable nil (reparse-symbol function_parameters) [15731 15739])
                            ("kwds" variable nil (reparse-symbol function_parameters) [15746 15752]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15712 16369])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16390 16394])
                            ("key" variable nil (reparse-symbol function_parameters) [16396 16399]))                          )
                        (reparse-symbol indented_block_body) [16374 16547])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16568 16572])
                            ("n" variable nil (reparse-symbol function_parameters) [16574 16575]))                          )
                        (reparse-symbol indented_block_body) [16552 17061])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17079 17083]))                          )
                        (reparse-symbol indented_block_body) [17066 17884])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17964 17967])
                            ("iterable" variable nil (reparse-symbol function_parameters) [17969 17977])
                            ("v" variable nil (reparse-symbol function_parameters) [17979 17980]))                          )
                        (reparse-symbol indented_block_body) [17934 18243])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18259 18263])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18265 18273])
                            ("kwds" variable nil (reparse-symbol function_parameters) [18280 18286]))                          )
                        (reparse-symbol indented_block_body) [18248 19789])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19807 19811])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19813 19821])
                            ("kwds" variable nil (reparse-symbol function_parameters) [19828 19834]))                          )
                        (reparse-symbol indented_block_body) [19794 20930])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20944 20948]))                          )
                        (reparse-symbol indented_block_body) [20935 21020])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21040 21044]))                          )
                        (reparse-symbol indented_block_body) [21025 21092])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21113 21117])
                            ("elem" variable nil (reparse-symbol function_parameters) [21119 21123]))                          )
                        (reparse-symbol indented_block_body) [21097 21284])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21302 21306]))                          )
                        (reparse-symbol indented_block_body) [21289 21512])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21869 21873])
                            ("other" variable nil (reparse-symbol function_parameters) [21875 21880]))                          )
                        (reparse-symbol indented_block_body) [21857 22430])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22447 22451])
                            ("other" variable nil (reparse-symbol function_parameters) [22453 22458]))                          )
                        (reparse-symbol indented_block_body) [22435 23037])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("other" variable nil (reparse-symbol function_parameters) [23059 23064]))                          )
                        (reparse-symbol indented_block_body) [23042 23711])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23728 23732])
                            ("other" variable nil (reparse-symbol function_parameters) [23734 23739]))                          )
                        (reparse-symbol indented_block_body) [23716 24235]))                  
                :type "class")
                nil [13652 24235])
            ("if" code nil nil [24237 25404]))          
    :file "collections.py"
    :pointmax 25404
    :fsize 25403
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax '((NAME 24862 . 24872) (PAREN_BLOCK 24872 . 24888) (NAME 24520 . 24530) (PAREN_BLOCK 24530 . 24546) (NAME 24087 . 24095) (IF 24104 . 24106) (ELSE 24127 . 24131) (NAME 23437 . 23445) (IF 23460 . 23462) (ELSE 23483 . 23487))
    )
   (semanticdb-table "SimpleHTTPServer.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Simple HTTP Server.

This module builds on BaseHTTPServer by implementing the standard GET
and HEAD requests in a fairly straightforward manner.

\"\"\"" code nil nil [1 153])
            ("__version__" variable nil nil [156 175])
            ("__all__" variable nil nil [177 215])
            ("os" include nil nil [217 226])
            ("posixpath" include nil nil [227 243])
            ("BaseHTTPServer" include nil nil [244 265])
            ("urllib" include nil nil [266 279])
            ("cgi" include nil nil [280 290])
            ("sys" include nil nil [291 301])
            ("shutil" include nil nil [302 315])
            ("mimetypes" include nil nil [316 332])
            ("try" code nil nil [333 427])
            ("SimpleHTTPRequestHandler" type
               (:documentation "Simple HTTP request handler with GET and HEAD commands.

    This serves files from the current directory and any of its
    subdirectories.  The MIME type for files is determined by
    calling the .guess_type() method.

    The GET and HEAD requests are identical except that the HEAD
    request omits the actual contents of the file.

    "
                :superclasses ("BaseHTTPServer.BaseHTTPRequestHandler")
                :members 
                  ( ("server_version" code nil (reparse-symbol indented_block_body) [860 904])
                    ("do_GET" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [921 925]))                          
                        :documentation "Serve a GET request.")
                        (reparse-symbol indented_block_body) [910 1069])
                    ("do_HEAD" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1086 1090]))                          
                        :documentation "Serve a HEAD request.")
                        (reparse-symbol indented_block_body) [1074 1194])
                    ("send_head" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1213 1217]))                          
                        :documentation "Common code for GET and HEAD commands.

        This sends the response code and MIME headers.

        Return value is either a file object (which has to be copied
        to the outputfile by the caller unless the command was HEAD,
        and must be closed by the caller under all circumstances), or
        None, in which case the caller has nothing further to do.

        ")
                        (reparse-symbol indented_block_body) [1199 2943])
                    ("list_directory" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2967 2971])
                            ("path" variable nil (reparse-symbol function_parameters) [2973 2977]))                          
                        :documentation "Helper to produce a directory listing (absent index.html).

        Return value is either a file object, or None (indicating an
        error).  In either case, the headers are sent, making the
        interface the same as for send_head().

        ")
                        (reparse-symbol indented_block_body) [2948 4736])
                    ("translate_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4760 4764])
                            ("path" variable nil (reparse-symbol function_parameters) [4766 4770]))                          
                        :documentation "Translate a /-separated PATH to the local filename syntax.

        Components that mean special things to the local file system
        (e.g. drive or directory names) are ignored.  (XXX They should
        probably be diagnosed.)

        ")
                        (reparse-symbol indented_block_body) [4741 5530])
                    ("copyfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5548 5552])
                            ("source" variable nil (reparse-symbol function_parameters) [5554 5560])
                            ("outputfile" variable nil (reparse-symbol function_parameters) [5562 5572]))                          
                        :documentation "Copy all data between two file objects.

        The SOURCE argument is a file object open for reading
        (or anything with a read() method) and the DESTINATION
        argument is a file object open for writing (or
        anything with a write() method).

        The only reason for overriding this would be to change
        the block size or perhaps to replace newlines by CRLF
        -- note however that this the default server uses this
        to copy binary data as well.

        ")
                        (reparse-symbol indented_block_body) [5535 6134])
                    ("guess_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6154 6158])
                            ("path" variable nil (reparse-symbol function_parameters) [6160 6164]))                          
                        :documentation "Guess the type of a file.

        Argument is a PATH (a filename).

        Return value is a string of the form type/subtype,
        usable for a MIME Content-type header.

        The default implementation looks the file's extension
        up in the table self.extensions_map, using application/octet-stream
        as a default; however it would be permissible (if
        slow) to look inside the data to make a better guess.

        ")
                        (reparse-symbol indented_block_body) [6139 6920])
                    ("if" code nil (reparse-symbol indented_block_body) [6925 7007])
                    ("extensions_map" variable nil (reparse-symbol indented_block_body) [7011 7054])
                    ("extensions_map" code nil (reparse-symbol indented_block_body) [7059 7228]))                  
                :type "class")
                nil [429 7229])
            ("test" function (:arguments 
              ( ("HandlerClass" variable nil (reparse-symbol function_parameters) [7240 7252])
                ("ServerClass" variable nil (reparse-symbol function_parameters) [7290 7301]))              ) nil [7231 7383])
            ("if" code nil nil [7385 7423]))          
    :file "SimpleHTTPServer.py"
    :pointmax 7423
    :fsize 7422
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "SocketServer.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Generic socket server classes.

This module tries to capture the various aspects of defining a server:

For socket-based servers:

- address family:
        - AF_INET{,6}: IP (Internet Protocol) sockets (default)
        - AF_UNIX: Unix domain sockets
        - others, e.g. AF_DECNET are conceivable (see <socket.h>
- socket type:
        - SOCK_STREAM (reliable stream, e.g. TCP)
        - SOCK_DGRAM (datagrams, e.g. UDP)

For request-based servers (including socket-based):

- client address verification before further looking at the request
        (This is actually a hook for any processing that needs to look
         at the request before anything else, e.g. logging)
- how to handle multiple requests:
        - synchronous (one request is handled at a time)
        - forking (each request is handled by a new process)
        - threading (each request is handled by a new thread)

The classes in this module favor the server type that is simplest to
write: a synchronous TCP/IP server.  This is bad class design, but
save some typing.  (There's also the issue that a deep class hierarchy
slows down method lookups.)

There are five classes in an inheritance diagram, four of which represent
synchronous servers of four types:

        +------------+
        | BaseServer |
        +------------+
              |
              v
        +-----------+        +------------------+
        | TCPServer |------->| UnixStreamServer |
        +-----------+        +------------------+
              |
              v
        +-----------+        +--------------------+
        | UDPServer |------->| UnixDatagramServer |
        +-----------+        +--------------------+

Note that UnixDatagramServer derives from UDPServer, not from
UnixStreamServer -- the only difference between an IP and a Unix
stream server is the address family, which is simply repeated in both
unix server classes.

Forking and threading versions of each type of server can be created
using the ForkingMixIn and ThreadingMixIn mix-in classes.  For
instance, a threading UDP server class is created as follows:

        class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass

The Mix-in class must come first, since it overrides a method defined
in UDPServer! Setting the various member variables also changes
the behavior of the underlying server mechanism.

To implement a service, you must derive a class from
BaseRequestHandler and redefine its handle() method.  You can then run
various versions of the service by combining one of the server classes
with your request handler class.

The request handler class must be different for datagram or stream
services.  This can be hidden by using the request handler
subclasses StreamRequestHandler or DatagramRequestHandler.

Of course, you still have to use your head!

For instance, it makes no sense to use a forking server if the service
contains state in memory that can be modified by requests (since the
modifications in the child process would never reach the initial state
kept in the parent process and passed to each child).  In this case,
you can use a threading server, but you will probably have to use
locks to avoid two requests that come in nearly simultaneous to apply
conflicting changes to the server state.

On the other hand, if you are building e.g. an HTTP server, where all
data is stored externally (e.g. in the file system), a synchronous
class will essentially render the service \"deaf\" while one request is
being handled -- which may be for a very long time if a client is slow
to read all the data it has requested.  Here a threading or forking
server is appropriate.

In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data.  This can be implemented by using a synchronous
server and doing an explicit fork in the request handler class
handle() method.

Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor fork (or where these are
too expensive or inappropriate for the service) is to maintain an
explicit table of partially finished requests and to use select() to
decide which request to work on next (or whether to handle a new
incoming request).  This is particularly important for stream services
where each client can potentially be connected for a long time (if
threads or subprocesses cannot be used).

Future work:
- Standard classes for Sun RPC (which uses either UDP or TCP)
- Standard mix-in classes to implement various authentication
  and encryption schemes
- Standard framework for select-based multiplexing

XXX Open problems:
- What to do with out-of-band data?

BaseServer:
- split generic \"request\" functionality out into BaseServer class.
  Copyright (C) 2000  Luke Kenneth Casson Leighton <lkcl@samba.org>

  example: read entries from a SQL database (requires overriding
  get_request() to return a table entry from the database).
  entry is processed by a RequestHandlerClass.

\"\"\"" code nil nil [1 5032])
            ("__version__" variable nil nil [5268 5287])
            ("socket" include nil nil [5290 5303])
            ("select" include nil nil [5304 5317])
            ("sys" include nil nil [5318 5328])
            ("os" include nil nil [5329 5338])
            ("try" code nil nil [5339 5425])
            ("__all__" variable nil nil [5426 5679])
            ("if" code nil nil [5680 5873])
            ("BaseServer" type
               (:documentation "Base class for server classes.

    Methods for the caller:

    - __init__(server_address, RequestHandlerClass)
    - serve_forever(poll_interval=0.5)
    - shutdown()
    - handle_request()  # if you do not use serve_forever()
    - fileno() -> int   # for select()

    Methods that may be overridden:

    - server_bind()
    - server_activate()
    - get_request() -> request, client_address
    - handle_timeout()
    - verify_request(request, client_address)
    - server_close()
    - process_request(request, client_address)
    - shutdown_request(request)
    - close_request(request)
    - handle_error()

    Methods for derived classes:

    - finish_request(request, client_address)

    Class variables that may be overridden by derived classes or
    instances:

    - timeout
    - address_family
    - socket_type
    - allow_reuse_address

    Instance variables:

    - RequestHandlerClass
    - socket

    "
                :members 
                  ( ("timeout" variable nil (reparse-symbol indented_block_body) [6837 6851])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor.  May be extended, do not override.\"\"\"" code nil (reparse-symbol indented_block_body) [6922 6975])
                            ("self" variable nil (reparse-symbol indented_block_body) [6984 7020])
                            ("self" variable nil (reparse-symbol indented_block_body) [7029 7075])
                            ("self" variable nil (reparse-symbol indented_block_body) [7084 7123])
                            ("self" variable nil (reparse-symbol indented_block_body) [7132 7163]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6870 6874])
                            ("server_address" variable nil (reparse-symbol function_parameters) [6876 6890])
                            ("RequestHandlerClass" variable nil (reparse-symbol function_parameters) [6892 6911]))                          
                        :documentation "Constructor.  May be extended, do not override."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6857 7164])
                    ("server_activate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7189 7193]))                          
                        :documentation "Called by constructor to activate the server.

        May be overridden.

        ")
                        (reparse-symbol indented_block_body) [7169 7307])
                    ("serve_forever" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7330 7334])
                            ("poll_interval" variable nil (reparse-symbol function_parameters) [7336 7349]))                          
                        :documentation "Handle one request at a time until shutdown.

        Polls for shutdown every poll_interval seconds. Ignores
        self.timeout. If you need to do periodic tasks, do them in
        another thread.
        ")
                        (reparse-symbol indented_block_body) [7312 8199])
                    ("shutdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8217 8221]))                          
                        :documentation "Stops the serve_forever loop.

        Blocks until the loop has finished. This must be called while
        serve_forever() is running in another thread, or it will
        deadlock.
        ")
                        (reparse-symbol indented_block_body) [8204 8505])
                    ("handle_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9100 9104]))                          
                        :documentation "Handle one request, possibly blocking.

        Respects self.timeout.
        ")
                        (reparse-symbol indented_block_body) [9081 9695])
                    ("_handle_request_noblock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9728 9732]))                          
                        :documentation "Handle one request, without blocking.

        I assume that select.select has returned that the socket is
        readable before this function was called, so there should be
        no risk of blocking in get_request().
        ")
                        (reparse-symbol indented_block_body) [9700 10360])
                    ("handle_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10384 10388]))                          
                        :documentation "Called if no new request arrives within self.timeout.

        Overridden by ForkingMixIn.
        ")
                        (reparse-symbol indented_block_body) [10365 10518])
                    ("verify_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10542 10546])
                            ("request" variable nil (reparse-symbol function_parameters) [10548 10555])
                            ("client_address" variable nil (reparse-symbol function_parameters) [10557 10571]))                          
                        :documentation "Verify the request.  May be overridden.

        Return True if we should proceed with this request.

        ")
                        (reparse-symbol indented_block_body) [10523 10719])
                    ("process_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10744 10748])
                            ("request" variable nil (reparse-symbol function_parameters) [10750 10757])
                            ("client_address" variable nil (reparse-symbol function_parameters) [10759 10773]))                          
                        :documentation "Call finish_request.

        Overridden by ForkingMixIn and ThreadingMixIn.

        ")
                        (reparse-symbol indented_block_body) [10724 10969])
                    ("server_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10991 10995]))                          
                        :documentation "Called to clean-up the server.

        May be overridden.

        ")
                        (reparse-symbol indented_block_body) [10974 11094])
                    ("finish_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11118 11122])
                            ("request" variable nil (reparse-symbol function_parameters) [11124 11131])
                            ("client_address" variable nil (reparse-symbol function_parameters) [11133 11147]))                          
                        :documentation "Finish one request by instantiating RequestHandlerClass.")
                        (reparse-symbol indented_block_body) [11099 11285])
                    ("shutdown_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11311 11315])
                            ("request" variable nil (reparse-symbol function_parameters) [11317 11324]))                          
                        :documentation "Called to shutdown and close an individual request.")
                        (reparse-symbol indented_block_body) [11290 11429])
                    ("close_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11452 11456])
                            ("request" variable nil (reparse-symbol function_parameters) [11458 11465]))                          
                        :documentation "Called to clean up an individual request.")
                        (reparse-symbol indented_block_body) [11434 11537])
                    ("handle_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11559 11563])
                            ("request" variable nil (reparse-symbol function_parameters) [11565 11572])
                            ("client_address" variable nil (reparse-symbol function_parameters) [11574 11588]))                          
                        :documentation "Handle an error gracefully.  May be overridden.

        The default is to print a traceback and continue.

        ")
                        (reparse-symbol indented_block_body) [11542 11949]))                  
                :type "class")
                nil [5874 11949])
            ("TCPServer" type
               (:documentation "Base class for various socket-based server classes.

    Defaults to synchronous IP stream (i.e., TCP).

    Methods for the caller:

    - __init__(server_address, RequestHandlerClass, bind_and_activate=True)
    - serve_forever(poll_interval=0.5)
    - shutdown()
    - handle_request()  # if you don't use serve_forever()
    - fileno() -> int   # for select()

    Methods that may be overridden:

    - server_bind()
    - server_activate()
    - get_request() -> request, client_address
    - handle_timeout()
    - verify_request(request, client_address)
    - process_request(request, client_address)
    - shutdown_request(request)
    - close_request(request)
    - handle_error()

    Methods for derived classes:

    - finish_request(request, client_address)

    Class variables that may be overridden by derived classes or
    instances:

    - timeout
    - address_family
    - socket_type
    - request_queue_size (only for stream sockets)
    - allow_reuse_address

    Instance variables:

    - server_address
    - RequestHandlerClass
    - socket

    "
                :superclasses ("BaseServer")
                :members 
                  ( ("address_family" variable nil (reparse-symbol indented_block_body) [13072 13103])
                    ("socket_type" variable nil (reparse-symbol indented_block_body) [13109 13141])
                    ("request_queue_size" variable nil (reparse-symbol indented_block_body) [13147 13169])
                    ("allow_reuse_address" variable nil (reparse-symbol indented_block_body) [13175 13202])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor.  May be extended, do not override.\"\"\"" code nil (reparse-symbol indented_block_body) [13297 13350])
                            ("BaseServer" code nil (reparse-symbol indented_block_body) [13359 13421])
                            ("self" variable nil (reparse-symbol indented_block_body) [13430 13532])
                            ("if" code nil (reparse-symbol indented_block_body) [13541 13629]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13221 13225])
                            ("server_address" variable nil (reparse-symbol function_parameters) [13227 13241])
                            ("RequestHandlerClass" variable nil (reparse-symbol function_parameters) [13243 13262])
                            ("bind_and_activate" variable nil (reparse-symbol function_parameters) [13264 13281]))                          
                        :documentation "Constructor.  May be extended, do not override."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13208 13629])
                    ("server_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13650 13654]))                          
                        :documentation "Called by constructor to bind the socket.

        May be overridden.

        ")
                        (reparse-symbol indented_block_body) [13634 13968])
                    ("server_activate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13993 13997]))                          
                        :documentation "Called by constructor to activate the server.

        May be overridden.

        ")
                        (reparse-symbol indented_block_body) [13973 14150])
                    ("server_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14172 14176]))                          
                        :documentation "Called to clean-up the server.

        May be overridden.

        ")
                        (reparse-symbol indented_block_body) [14155 14290])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14306 14310]))                          
                        :documentation "Return socket file number.

        Interface required by select().

        ")
                        (reparse-symbol indented_block_body) [14295 14441])
                    ("get_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14462 14466]))                          
                        :documentation "Get the request and client address from the socket.

        May be overridden.

        ")
                        (reparse-symbol indented_block_body) [14446 14609])
                    ("shutdown_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14635 14639])
                            ("request" variable nil (reparse-symbol function_parameters) [14641 14648]))                          
                        :documentation "Called to shutdown and close an individual request.")
                        (reparse-symbol indented_block_body) [14614 15033])
                    ("close_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15056 15060])
                            ("request" variable nil (reparse-symbol function_parameters) [15062 15069]))                          
                        :documentation "Called to clean up an individual request.")
                        (reparse-symbol indented_block_body) [15038 15152]))                  
                :type "class")
                nil [11951 15152])
            ("UDPServer" type
               (:documentation "UDP server class."
                :superclasses ("TCPServer")
                :members 
                  ( ("allow_reuse_address" variable nil (reparse-symbol indented_block_body) [15216 15243])
                    ("socket_type" variable nil (reparse-symbol indented_block_body) [15249 15280])
                    ("max_packet_size" variable nil (reparse-symbol indented_block_body) [15286 15308])
                    ("get_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15330 15334]))                          )
                        (reparse-symbol indented_block_body) [15314 15456])
                    ("server_activate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15481 15485]))                          )
                        (reparse-symbol indented_block_body) [15461 15545])
                    ("shutdown_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15571 15575])
                            ("request" variable nil (reparse-symbol function_parameters) [15577 15584]))                          )
                        (reparse-symbol indented_block_body) [15550 15663])
                    ("close_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15686 15690])
                            ("request" variable nil (reparse-symbol function_parameters) [15692 15699]))                          )
                        (reparse-symbol indented_block_body) [15668 15752]))                  
                :type "class")
                nil [15154 15752])
            ("ForkingMixIn" type
               (:documentation "Mix-in class to handle each request in a new process."
                :members 
                  ( ("timeout" variable nil (reparse-symbol indented_block_body) [15843 15856])
                    ("active_children" variable nil (reparse-symbol indented_block_body) [15861 15883])
                    ("max_children" variable nil (reparse-symbol indented_block_body) [15888 15905])
                    ("collect_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15932 15936]))                          
                        :documentation "Internal routine to wait for children that have exited.")
                        (reparse-symbol indented_block_body) [15911 17339])
                    ("handle_timeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17363 17367]))                          
                        :documentation "Wait for zombies after self.timeout seconds of inactivity.

        May be extended, do not override.
        ")
                        (reparse-symbol indented_block_body) [17344 17527])
                    ("process_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17552 17556])
                            ("request" variable nil (reparse-symbol function_parameters) [17558 17565])
                            ("client_address" variable nil (reparse-symbol function_parameters) [17567 17581]))                          
                        :documentation "Fork a new subprocess to process the request.")
                        (reparse-symbol indented_block_body) [17532 18432]))                  
                :type "class")
                nil [15753 18432])
            ("ThreadingMixIn" type
               (:documentation "Mix-in class to handle each request in a new thread."
                :members 
                  ( ("daemon_threads" variable nil (reparse-symbol indented_block_body) [18602 18624])
                    ("process_request_thread" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18657 18661])
                            ("request" variable nil (reparse-symbol function_parameters) [18663 18670])
                            ("client_address" variable nil (reparse-symbol function_parameters) [18672 18686]))                          
                        :documentation "Same as in BaseServer but as a thread.

        In addition, exception handling is done here.

        ")
                        (reparse-symbol indented_block_body) [18630 19034])
                    ("process_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19059 19063])
                            ("request" variable nil (reparse-symbol function_parameters) [19065 19072])
                            ("client_address" variable nil (reparse-symbol function_parameters) [19074 19088]))                          
                        :documentation "Start a new thread to process the request.")
                        (reparse-symbol indented_block_body) [19039 19335]))                  
                :type "class")
                nil [18434 19335])
            ("ForkingUDPServer" type
               (:superclasses ("ForkingMixIn" "UDPServer")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [19337 19391])
            ("ForkingTCPServer" type
               (:superclasses ("ForkingMixIn" "TCPServer")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [19391 19445])
            ("ThreadingUDPServer" type
               (:superclasses ("ThreadingMixIn" "UDPServer")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [19446 19504])
            ("ThreadingTCPServer" type
               (:superclasses ("ThreadingMixIn" "TCPServer")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [19504 19562])
            ("if" code nil nil [19563 19914])
            ("BaseRequestHandler" type
               (:documentation "Base class for request handler classes.

    This class is instantiated for each request to be handled.  The
    constructor sets the instance variables request, client_address
    and server, and then calls the handle() method.  To implement a
    specific service, all you need to do is to derive a class which
    defines a handle() method.

    The handle() method can find the request as self.request, the
    client address as self.client_address, and the server (in case it
    needs access to per-server information) as self.server.  Since a
    separate instance is created for each request, the handle() method
    can define arbitrary other instance variariables.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20699 20721])
                            ("self" variable nil (reparse-symbol indented_block_body) [20730 20766])
                            ("self" variable nil (reparse-symbol indented_block_body) [20775 20795])
                            ("self" code nil (reparse-symbol indented_block_body) [20804 20816])
                            ("try" code nil (reparse-symbol indented_block_body) [20825 20899]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20651 20655])
                            ("request" variable nil (reparse-symbol function_parameters) [20657 20664])
                            ("client_address" variable nil (reparse-symbol function_parameters) [20666 20680])
                            ("server" variable nil (reparse-symbol function_parameters) [20682 20688]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20638 20899])
                    ("setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20914 20918]))                          )
                        (reparse-symbol indented_block_body) [20904 20934])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20950 20954]))                          )
                        (reparse-symbol indented_block_body) [20939 20970])
                    ("finish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20986 20990]))                          )
                        (reparse-symbol indented_block_body) [20975 21006]))                  
                :type "class")
                nil [19915 21006])
            ("StreamRequestHandler" type
               (:documentation "Define self.rfile and self.wfile for stream sockets."
                :superclasses ("BaseRequestHandler")
                :members 
                  ( ("rbufsize" code nil (reparse-symbol indented_block_body) [21860 21873])
                    ("wbufsize" variable nil (reparse-symbol indented_block_body) [21878 21890])
                    ("timeout" variable nil (reparse-symbol indented_block_body) [21957 21971])
                    ("disable_nagle_algorithm" variable nil (reparse-symbol indented_block_body) [22092 22123])
                    ("setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22139 22143]))                          )
                        (reparse-symbol indented_block_body) [22129 22574])
                    ("finish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22590 22594]))                          )
                        (reparse-symbol indented_block_body) [22579 22716]))                  
                :type "class")
                nil [21348 22716])
            ("DatagramRequestHandler" type
               (:documentation "Define self.rfile and self.wfile for datagram sockets."
                :superclasses ("BaseRequestHandler")
                :members 
                  ( ("setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22972 22976]))                          )
                        (reparse-symbol indented_block_body) [22962 23228])
                    ("finish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23244 23248]))                          )
                        (reparse-symbol indented_block_body) [23233 23322]))                  
                :type "class")
                nil [22718 23322]))          
    :file "SocketServer.py"
    :pointmax 23322
    :fsize 23321
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "socket.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 2950])
            ("os" include nil nil [2951 2975])
            ("sys" include nil nil [2951 2975])
            ("warnings" include nil nil [2951 2975])
            ("try" code nil nil [2977 3071])
            ("try" code nil nil [3072 3131])
            ("EBADF" variable nil nil [3131 3165])
            ("EINTR" variable nil nil [3166 3200])
            ("__all__" variable nil nil [3202 3244])
            ("__all__" code nil nil [3245 3290])
            ("_realsocket" variable nil nil [3293 3313])
            ("if" code nil nil [3333 4229])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4244 4248]))                  )
                nil [4232 4923])
            ("_socketmethods" variable nil nil [4925 5136])
            ("if" code nil nil [5138 5207])
            ("if" code nil nil [5208 5291])
            ("_delegate_methods" variable nil nil [5402 5511])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5546 5560])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5576 5581]))                      ) (reparse-symbol indented_block_body) [5565 5634])
                    ("send" variable nil (reparse-symbol indented_block_body) [5697 5765])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5770 5790]))                  
                :type "class")
                nil [5513 5791])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6031 6060])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6066 6128])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6217 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6314])
                            ("for" code nil (reparse-symbol indented_block_body) [6323 6414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("family" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("type" variable nil (reparse-symbol function_parameters) [6169 6173])
                            ("proto" variable nil (reparse-symbol function_parameters) [6187 6192])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6196 6201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6134 6414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6429 6433])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6435 6448])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6478 6495])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6515 6522]))                          )
                        (reparse-symbol indented_block_body) [6419 6763])
                    ("close" variable nil (reparse-symbol indented_block_body) [6767 6808])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6825 6829]))                          )
                        (reparse-symbol indented_block_body) [6814 6920])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6924 6967])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6973 7147])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7165 7169])
                            ("mode" variable nil (reparse-symbol function_parameters) [7171 7175])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7181 7188]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7152 7453])
                    ("family" variable nil (reparse-symbol indented_block_body) [7458 7532])
                    ("type" variable nil (reparse-symbol indented_block_body) [7537 7605])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7610 7684]))                  
                :type "class")
                nil [5997 7685])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7695 7699])
                ("self" variable nil (reparse-symbol function_parameters) [7700 7704])
                ("args" variable nil (reparse-symbol function_parameters) [7705 7710]))              ) nil [7686 7756])
            ("for" code nil nil [7757 7949])
            ("socket" variable nil nil [7950 7985])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8075 8097])
                    ("name" variable nil (reparse-symbol indented_block_body) [8102 8119])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8125 8332])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8408 8425])
                            ("self" variable nil (reparse-symbol indented_block_body) [8434 8450])
                            ("if" code nil (reparse-symbol indented_block_body) [8495 8554])
                            ("self" variable nil (reparse-symbol indented_block_body) [8562 8584])
                            ("self" variable nil (reparse-symbol indented_block_body) [8593 8615])
                            ("if" code nil (reparse-symbol indented_block_body) [8842 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9026 9050])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9362])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9386])
                            ("self" variable nil (reparse-symbol indented_block_body) [9415 9433])
                            ("self" variable nil (reparse-symbol indented_block_body) [9442 9461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("sock" variable nil (reparse-symbol function_parameters) [8357 8361])
                            ("mode" variable nil (reparse-symbol function_parameters) [8363 8367])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8374 8381])
                            ("close" variable nil (reparse-symbol function_parameters) [8386 8391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8338 9462])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9482 9486]))                          )
                        (reparse-symbol indented_block_body) [9467 9523])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9527 9590])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610]))                          )
                        (reparse-symbol indented_block_body) [9596 9792])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813]))                          )
                        (reparse-symbol indented_block_body) [9797 9946])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9951 10724])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10740 10744]))                          )
                        (reparse-symbol indented_block_body) [10729 10782])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10797 10801])
                            ("data" variable nil (reparse-symbol function_parameters) [10803 10807]))                          )
                        (reparse-symbol indented_block_body) [10787 11152])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11172 11176])
                            ("list" variable nil (reparse-symbol function_parameters) [11178 11182]))                          )
                        (reparse-symbol indented_block_body) [11157 11533])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11547 11551])
                            ("size" variable nil (reparse-symbol function_parameters) [11553 11557]))                          )
                        (reparse-symbol indented_block_body) [11538 14505])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14523 14527])
                            ("size" variable nil (reparse-symbol function_parameters) [14529 14533]))                          )
                        (reparse-symbol indented_block_body) [14510 18528])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18547 18551])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18553 18561]))                          )
                        (reparse-symbol indented_block_body) [18533 18854])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18898 18902]))                          )
                        (reparse-symbol indented_block_body) [18885 18925])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18939 18943]))                          )
                        (reparse-symbol indented_block_body) [18930 19050]))                  
                :type "class")
                nil [7987 19050])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19051 19085])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19109 19116])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19118 19125])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19173 19187]))                  )
                nil [19087 20486]))          
    :file "socket.py"
    :pointmax 20486
    :fsize 20485
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((INDENT_BLOCK 20294 . 20376) (NEWLINE 20293 . 20294) (COLON 20292 . 20293) (TRY 19992 . 19995) (AS 20288 . 20290))
    )
   (semanticdb-table "posixpath.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("warnings" include nil nil [548 563])
            ("genericpath" include nil nil [564 589])
            ("__all__" variable nil nil [591 1079])
            ("curdir" variable nil nil [1141 1153])
            ("pardir" variable nil nil [1154 1167])
            ("extsep" variable nil nil [1168 1180])
            ("sep" variable nil nil [1181 1190])
            ("pathsep" variable nil nil [1191 1204])
            ("defpath" variable nil nil [1205 1231])
            ("altsep" variable nil nil [1232 1245])
            ("devnull" variable nil nil [1246 1267])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1547 1548]))                  )
                nil [1534 1629])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1728 1729]))                  )
                nil [1718 1803])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1954 1955])
                    ("p" variable nil (reparse-symbol function_parameters) [1957 1959]))                  )
                nil [1945 2337])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2593 2594]))                  )
                nil [2583 2884])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3105 3106]))              ) nil [3092 3166])
            ("splitext" variable nil nil [3166 3214])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3369 3370]))                  )
                nil [3354 3475])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3560 3561]))                  )
                nil [3547 3658])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3741 3742]))                  )
                nil [3729 3930])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4046 4050]))                  )
                nil [4035 4235])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4306 4310]))                  )
                nil [4294 4481])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [4551 4553])
                    ("f2" variable nil (reparse-symbol function_parameters) [4555 4557]))                  )
                nil [4538 4698])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [4819 4822])
                    ("fp2" variable nil (reparse-symbol function_parameters) [4824 4827]))                  )
                nil [4802 4973])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [5077 5079])
                    ("s2" variable nil (reparse-symbol function_parameters) [5081 5083]))                  )
                nil [5064 5224])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5342 5346]))                  )
                nil [5330 5919])
            ("walk" function
               (:documentation "Directory tree walk with callback function.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
    dirname is the name of the directory, and fnames a list of the names of
    the files and subdirectories in dirname (excluding '.' and '..').  func
    may modify the fnames list in-place (e.g. via del or slice assignment),
    and walk will only recurse into the subdirectories whose names remain in
    fnames; this can be used to implement a filter, or to impose a specific
    order of visiting.  No semantics are defined for, or required of, arg,
    beyond that arg is always passed to func.  It can be used, e.g., to pass
    a filename pattern, or a mutable object designed to accumulate
    statistics.  Passing None for arg is common."
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [6317 6320])
                    ("func" variable nil (reparse-symbol function_parameters) [6322 6326])
                    ("arg" variable nil (reparse-symbol function_parameters) [6328 6331]))                  )
                nil [6308 7619])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8110 8114]))                  )
                nil [8095 8755])
            ("_varprog" variable nil nil [8916 8931])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8948 8952]))                  )
                nil [8933 9652])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9840 9844]))                  )
                nil [9827 10794])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10808 10812]))                  )
                nil [10796 11044])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11146 11154]))                  )
                nil [11133 11908])
            ("_resolve_link" function
               (:documentation "Internal helper function.  Takes a path and follows symlinks
    until we either arrive at something that isn't a symlink, or
    encounter a path we've seen before (meaning that there's a loop).
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11928 11932]))                  )
                nil [11910 12607])
            ("supports_unicode_filenames" variable nil nil [12608 12663])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [12677 12681])
                    ("start" variable nil (reparse-symbol function_parameters) [12683 12688]))                  )
                nil [12665 13183]))          
    :file "posixpath.py"
    :pointmax 13183
    :fsize 13182
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((NAME 9954 . 9959) (IF 9980 . 9982) (ELSE 10009 . 10013))
    )
   (semanticdb-table "BaseHTTPServer.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"HTTP server base class.

Note: the class in this module doesn't implement any HTTP request; see
SimpleHTTPServer for simple implementations of GET, HEAD and POST
(including CGI scripts).  It does, however, optionally implement HTTP/1.1
persistent connections, as of version 0.3.

Contents:

- BaseHTTPRequestHandler: HTTP request handler base class
- test: test function

XXX To do:

- log requests even later (to capture byte count)
- log user-agent header and other interesting goodies
- send error log to separate file
\"\"\"" code nil nil [1 529])
            ("__version__" variable nil nil [2397 2416])
            ("__all__" variable nil nil [2418 2468])
            ("sys" include nil nil [2470 2480])
            ("time" include nil nil [2481 2492])
            ("socket" include nil nil [2493 2506])
            ("warnings" include nil nil [2529 2580])
            ("with" code nil nil [2581 2758])
            ("SocketServer" include nil nil [2758 2777])
            ("DEFAULT_ERROR_MESSAGE" variable nil nil [2812 3028])
            ("DEFAULT_ERROR_CONTENT_TYPE" variable nil nil [3030 3070])
            ("_quote_html" function (:arguments 
              ( ("html" variable nil (reparse-symbol function_parameters) [3088 3092]))              ) nil [3072 3175])
            ("HTTPServer" type
               (:superclasses ("SocketServer.TCPServer")
                :members 
                  ( ("allow_reuse_address" variable nil (reparse-symbol indented_block_body) [3223 3246])
                    ("server_bind" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3316 3320]))                          
                        :documentation "Override server_bind to store the server name.")
                        (reparse-symbol indented_block_body) [3300 3564]))                  
                :type "class")
                nil [3176 3564])
            ("BaseHTTPRequestHandler" type
               (:documentation "HTTP request handler base class.

    The following explanation of HTTP serves to guide you through the
    code as well as to expose any misunderstandings I may have about
    HTTP (so you don't need to read the code to figure out I'm wrong
    :-).

    HTTP (HyperText Transfer Protocol) is an extensible protocol on
    top of a reliable stream transport (e.g. TCP/IP).  The protocol
    recognizes three parts to a request:

    1. One line identifying the request type and path
    2. An optional set of RFC-822-style headers
    3. An optional data part

    The headers and data are separated by a blank line.

    The first line of the request has the form

    <command> <path> <version>

    where <command> is a (case-sensitive) keyword such as GET or POST,
    <path> is a string containing path information for the request,
    and <version> should be the string \"HTTP/1.0\" or \"HTTP/1.1\".
    <path> is encoded using the URL encoding scheme (using %xx to signify
    the ASCII character with hex code xx).

    The specification specifies that lines are separated by CRLF but
    for compatibility with the widest range of clients recommends
    servers also handle LF.  Similarly, whitespace in the request line
    is treated sensibly (allowing multiple spaces between components
    and allowing trailing whitespace).

    Similarly, for output, lines ought to be separated by CRLF pairs
    but most clients grok LF characters just fine.

    If the first line of the request has the form

    <command> <path>

    (i.e. <version> is left out) then this is assumed to be an HTTP
    0.9 request; this form has no optional headers and data part and
    the reply consists of just the data.

    The reply form of the HTTP 1.x protocol again has three parts:

    1. One line giving the response code
    2. An optional set of RFC-822-style headers
    3. The data

    Again, the headers and data are separated by a blank line.

    The response code line has the form

    <version> <responsecode> <responsestring>

    where <version> is the protocol version (\"HTTP/1.0\" or \"HTTP/1.1\"),
    <responsecode> is a 3-digit response code indicating success or
    failure of the request, and <responsestring> is an optional
    human-readable string explaining what the response code means.

    This server parses the request and the headers, and then calls a
    function specific to the request type (<command>).  Specifically,
    a request SPAM will be handled by a method do_SPAM().  If no
    such method exists the server sends an error response to the
    client.  If it exists, it is called with no arguments:

    do_SPAM()

    Note that the request name is case sensitive (i.e. SPAM and spam
    are different requests).

    The various request details are stored in instance variables:

    - client_address is the client IP address in the form (host,
    port);

    - command, path and version are the broken-down request line;

    - headers is an instance of mimetools.Message (or a derived
    class) containing the header information;

    - rfile is a file object open for reading positioned at the
    start of the optional input data part;

    - wfile is a file object open for writing.

    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!

    The first thing to be written must be the response line.  Then
    follow 0 or more header lines, then a blank line, and then the
    actual data (if any).  The meaning of the header lines depends on
    the command executed by the server; in most cases, when data is
    returned, there should be at least one header line of the form

    Content-type: <type>/<subtype>

    where <type> and <subtype> should be registered MIME types,
    e.g. \"text/html\" or \"text/plain\".

    "
                :superclasses ("SocketServer.StreamRequestHandler")
                :members 
                  ( ("sys_version" code nil (reparse-symbol indented_block_body) [7486 7534])
                    ("server_version" code nil (reparse-symbol indented_block_body) [7721 7763])
                    ("default_request_version" variable nil (reparse-symbol indented_block_body) [8059 8095])
                    ("parse_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8119 8123]))                          
                        :documentation "Parse a request (internal).

        The request should be stored in self.raw_requestline; the results
        are in self.command, self.path, self.request_version and
        self.headers.

        Return True for success, False for failure; on failure, an
        error is sent back.

        ")
                        (reparse-symbol indented_block_body) [8101 11064])
                    ("handle_one_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11092 11096]))                          
                        :documentation "Handle a single HTTP request.

        You normally don't need to override this method; see the class
        __doc__ string for information on how to handle specific HTTP
        commands such as GET and POST.

        ")
                        (reparse-symbol indented_block_body) [11069 12400])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12416 12420]))                          
                        :documentation "Handle multiple requests if necessary.")
                        (reparse-symbol indented_block_body) [12405 12624])
                    ("send_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12644 12648])
                            ("code" variable nil (reparse-symbol function_parameters) [12650 12654])
                            ("message" variable nil (reparse-symbol function_parameters) [12656 12663]))                          
                        :documentation "Send and log an error reply.

        Arguments are the error code, and a detailed message.
        The detailed message defaults to the short entry matching the
        response code.

        This sends an error response (so it must be called before any
        output has been generated), logs the error, and finally sends
        a piece of HTML explaining the error to the user.

        ")
                        (reparse-symbol indented_block_body) [12629 13865])
                    ("error_message_format" variable nil (reparse-symbol indented_block_body) [13870 13914])
                    ("error_content_type" variable nil (reparse-symbol indented_block_body) [13919 13966])
                    ("send_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13990 13994])
                            ("code" variable nil (reparse-symbol function_parameters) [13996 14000])
                            ("message" variable nil (reparse-symbol function_parameters) [14002 14009]))                          
                        :documentation "Send the response header and log the response code.

        Also send two standard headers with the server software
        version and the current date.

        ")
                        (reparse-symbol indented_block_body) [13972 14728])
                    ("send_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14749 14753])
                            ("keyword" variable nil (reparse-symbol function_parameters) [14755 14762])
                            ("value" variable nil (reparse-symbol function_parameters) [14764 14769]))                          
                        :documentation "Send a MIME header.")
                        (reparse-symbol indented_block_body) [14733 15133])
                    ("end_headers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15154 15158]))                          
                        :documentation "Send the blank line ending the MIME headers.")
                        (reparse-symbol indented_block_body) [15138 15304])
                    ("log_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15325 15329])
                            ("code" variable nil (reparse-symbol function_parameters) [15331 15335])
                            ("size" variable nil (reparse-symbol function_parameters) [15341 15345]))                          
                        :documentation "Log an accepted request.

        This is called by send_response().

        ")
                        (reparse-symbol indented_block_body) [15309 15550])
                    ("log_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15569 15573])
                            ("format" variable nil (reparse-symbol function_parameters) [15575 15581])
                            ("args" variable nil (reparse-symbol function_parameters) [15583 15588]))                          
                        :documentation "Log an error.

        This is called when a request cannot be fulfilled.  By
        default it passes the message on to log_message().

        Arguments are the same as for log_message().

        XXX This should go to the separate error log.

        ")
                        (reparse-symbol indented_block_body) [15555 15902])
                    ("log_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15923 15927])
                            ("format" variable nil (reparse-symbol function_parameters) [15929 15935])
                            ("args" variable nil (reparse-symbol function_parameters) [15937 15942]))                          
                        :documentation "Log an arbitrary message.

        This is used by all other logging functions.  Override
        it if you have specific logging wishes.

        The first argument, FORMAT, is a format string for the
        message to be logged.  If the format string contains
        any % escapes requiring parameters, they should be
        specified as subsequent arguments (it's just like
        printf!).

        The client host and current date/time are prefixed to
        every message.

        ")
                        (reparse-symbol indented_block_body) [15907 16644])
                    ("version_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16668 16672]))                          
                        :documentation "Return the server software version string.")
                        (reparse-symbol indented_block_body) [16649 16792])
                    ("date_time_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16818 16822])
                            ("timestamp" variable nil (reparse-symbol function_parameters) [16824 16833]))                          
                        :documentation "Return the current date and time formatted for a message header.")
                        (reparse-symbol indented_block_body) [16797 17245])
                    ("log_date_time_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17275 17279]))                          
                        :documentation "Return the current time formatted for logging.")
                        (reparse-symbol indented_block_body) [17250 17563])
                    ("weekdayname" variable nil (reparse-symbol indented_block_body) [17568 17631])
                    ("monthname" variable nil (reparse-symbol indented_block_body) [17637 17773])
                    ("address_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17798 17802]))                          
                        :documentation "Return the client address formatted for logging.

        This version looks up the full hostname using gethostbyaddr(),
        and tries to find a name that contains at least one dot.

        ")
                        (reparse-symbol indented_block_body) [17779 18097])
                    ("protocol_version" variable nil (reparse-symbol indented_block_body) [18252 18281])
                    ("MessageClass" variable nil (reparse-symbol indented_block_body) [18338 18370])
                    ("responses" variable nil (reparse-symbol indented_block_body) [18509 21833]))                  
                :type "class")
                nil [3566 21834])
            ("test" function
               (:documentation "Test the HTTP request handler class.

    This runs an HTTP server on port 8000 (or the first command line
    argument).

    "
                :arguments 
                  ( ("HandlerClass" variable nil (reparse-symbol function_parameters) [21845 21857])
                    ("ServerClass" variable nil (reparse-symbol function_parameters) [21893 21904])
                    ("protocol" variable nil (reparse-symbol function_parameters) [21919 21927]))                  )
                nil [21836 22415])
            ("if" code nil nil [22417 22455]))          
    :file "BaseHTTPServer.py"
    :pointmax 22455
    :fsize 22454
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "urllib.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("base64" include nil nil [1025 1038])
            ("urlparse" include nil nil [1040 1080])
            ("__all__" variable nil nil [1082 1532])
            ("__version__" variable nil nil [1534 1554])
            ("MAXFTPCACHE" variable nil nil [1604 1620])
            ("if" code nil nil [1697 2270])
            ("_urlopener" variable nil nil [2534 2551])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2564 2567])
                    ("data" variable nil (reparse-symbol function_parameters) [2569 2573])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2580 2587]))                  )
                nil [2552 3151])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3167 3170])
                ("filename" variable nil (reparse-symbol function_parameters) [3172 3180])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3187 3197])
                ("data" variable nil (reparse-symbol function_parameters) [3204 3208]))              ) nil [3151 3363])
            ("urlcleanup" function nil nil [3363 3476])
            ("try" code nil nil [3493 3570])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3728 3759])
                            ("self" variable nil (reparse-symbol indented_block_body) [3768 3790]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3695 3699])
                            ("message" variable nil (reparse-symbol function_parameters) [3701 3708])
                            ("content" variable nil (reparse-symbol function_parameters) [3710 3717]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3682 3791]))                  
                :type "class")
                nil [3641 3791])
            ("ftpcache" variable nil nil [3792 3805])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4139 4157])
                    ("version" code nil (reparse-symbol indented_block_body) [4163 4205])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4279 4334])
                            ("assert" code nil (reparse-symbol indented_block_body) [4342 4405])
                            ("self" variable nil (reparse-symbol indented_block_body) [4414 4436])
                            ("self" variable nil (reparse-symbol indented_block_body) [4445 4481])
                            ("self" variable nil (reparse-symbol indented_block_body) [4490 4528])
                            ("self" variable nil (reparse-symbol indented_block_body) [4537 4585])
                            ("self" variable nil (reparse-symbol indented_block_body) [4594 4615])
                            ("self" variable nil (reparse-symbol indented_block_body) [4624 4649])
                            ("self" variable nil (reparse-symbol indented_block_body) [4674 4695])
                            ("self" variable nil (reparse-symbol indented_block_body) [5016 5040]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4242 4246])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4248 4255])
                            ("x509" variable nil (reparse-symbol function_parameters) [4262 4268]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4229 5041])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5277 5281]))                          )
                        (reparse-symbol indented_block_body) [5265 5305])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5320 5324]))                          )
                        (reparse-symbol indented_block_body) [5310 5350])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5367 5371]))                          )
                        (reparse-symbol indented_block_body) [5355 5819])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5838 5842])
                            ("args" variable nil (reparse-symbol function_parameters) [5844 5849]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5824 6004])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6043 6047])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6049 6056])
                            ("data" variable nil (reparse-symbol function_parameters) [6058 6062]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6034 7496])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7518 7522])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7524 7531])
                            ("data" variable nil (reparse-symbol function_parameters) [7533 7537]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7501 7709])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7737 7741])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7743 7748])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7750 7757])
                            ("data" variable nil (reparse-symbol function_parameters) [7759 7763]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7714 7947])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7990 7994])
                            ("url" variable nil (reparse-symbol function_parameters) [7996 7999])
                            ("filename" variable nil (reparse-symbol function_parameters) [8001 8009])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8016 8026])
                            ("data" variable nil (reparse-symbol function_parameters) [8033 8037]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [7977 10414])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10505 10509])
                            ("url" variable nil (reparse-symbol function_parameters) [10511 10514])
                            ("data" variable nil (reparse-symbol function_parameters) [10516 10520]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10491 13413])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13433 13437])
                            ("url" variable nil (reparse-symbol function_parameters) [13439 13442])
                            ("fp" variable nil (reparse-symbol function_parameters) [13444 13446])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13448 13455])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13457 13463])
                            ("headers" variable nil (reparse-symbol function_parameters) [13465 13472])
                            ("data" variable nil (reparse-symbol function_parameters) [13474 13478]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13418 14135])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14163 14167])
                            ("url" variable nil (reparse-symbol function_parameters) [14169 14172])
                            ("fp" variable nil (reparse-symbol function_parameters) [14174 14176])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14178 14185])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14187 14193])
                            ("headers" variable nil (reparse-symbol function_parameters) [14195 14202]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14140 14365])
                    ("if" code nil (reparse-symbol indented_block_body) [14370 17639])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17658 17662])
                            ("url" variable nil (reparse-symbol function_parameters) [17664 17667]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17644 18055])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18080 18084])
                            ("url" variable nil (reparse-symbol function_parameters) [18086 18089]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18060 19595])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19613 19617])
                            ("url" variable nil (reparse-symbol function_parameters) [19619 19622]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19600 22058])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22077 22081])
                            ("url" variable nil (reparse-symbol function_parameters) [22083 22086])
                            ("data" variable nil (reparse-symbol function_parameters) [22088 22092]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22063 23724]))                  
                :type "class")
                nil [3806 23724])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23883 23924])
                            ("self" variable nil (reparse-symbol indented_block_body) [23933 23953])
                            ("self" variable nil (reparse-symbol indented_block_body) [23962 23976])
                            ("self" variable nil (reparse-symbol indented_block_body) [23985 24003]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23851 23855])
                            ("args" variable nil (reparse-symbol function_parameters) [23857 23862])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23864 23872]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23838 24004])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24032 24036])
                            ("url" variable nil (reparse-symbol function_parameters) [24038 24041])
                            ("fp" variable nil (reparse-symbol function_parameters) [24043 24045])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24047 24054])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24056 24062])
                            ("headers" variable nil (reparse-symbol function_parameters) [24064 24071]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24009 24203])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24227 24231])
                            ("url" variable nil (reparse-symbol function_parameters) [24233 24236])
                            ("fp" variable nil (reparse-symbol function_parameters) [24238 24240])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24242 24249])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24251 24257])
                            ("headers" variable nil (reparse-symbol function_parameters) [24259 24266])
                            ("data" variable nil (reparse-symbol function_parameters) [24268 24272]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24208 24879])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24906 24910])
                            ("url" variable nil (reparse-symbol function_parameters) [24912 24915])
                            ("fp" variable nil (reparse-symbol function_parameters) [24917 24919])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24921 24928])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24930 24936])
                            ("headers" variable nil (reparse-symbol function_parameters) [24938 24945])
                            ("data" variable nil (reparse-symbol function_parameters) [24947 24951]))                          )
                        (reparse-symbol indented_block_body) [24884 25823])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25847 25851])
                            ("url" variable nil (reparse-symbol function_parameters) [25853 25856])
                            ("fp" variable nil (reparse-symbol function_parameters) [25858 25860])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25862 25869])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25871 25877])
                            ("headers" variable nil (reparse-symbol function_parameters) [25879 25886])
                            ("data" variable nil (reparse-symbol function_parameters) [25888 25892]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25828 26033])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26057 26061])
                            ("url" variable nil (reparse-symbol function_parameters) [26063 26066])
                            ("fp" variable nil (reparse-symbol function_parameters) [26068 26070])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26072 26079])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26081 26087])
                            ("headers" variable nil (reparse-symbol function_parameters) [26089 26096])
                            ("data" variable nil (reparse-symbol function_parameters) [26098 26102]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26038 26260])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26284 26288])
                            ("url" variable nil (reparse-symbol function_parameters) [26290 26293])
                            ("fp" variable nil (reparse-symbol function_parameters) [26295 26297])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26299 26306])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26308 26314])
                            ("headers" variable nil (reparse-symbol function_parameters) [26316 26323])
                            ("data" variable nil (reparse-symbol function_parameters) [26325 26329]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26265 26598])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26622 26626])
                            ("url" variable nil (reparse-symbol function_parameters) [26628 26631])
                            ("fp" variable nil (reparse-symbol function_parameters) [26633 26635])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26637 26644])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26646 26652])
                            ("headers" variable nil (reparse-symbol function_parameters) [26654 26661])
                            ("data" variable nil (reparse-symbol function_parameters) [26663 26667]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26603 27630])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27654 27658])
                            ("url" variable nil (reparse-symbol function_parameters) [27660 27663])
                            ("fp" variable nil (reparse-symbol function_parameters) [27665 27667])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27669 27676])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27678 27684])
                            ("headers" variable nil (reparse-symbol function_parameters) [27686 27693])
                            ("data" variable nil (reparse-symbol function_parameters) [27695 27699]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27635 28678])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28715 28719])
                            ("url" variable nil (reparse-symbol function_parameters) [28721 28724])
                            ("realm" variable nil (reparse-symbol function_parameters) [28726 28731])
                            ("data" variable nil (reparse-symbol function_parameters) [28733 28737]))                          )
                        (reparse-symbol indented_block_body) [28683 29427])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29465 29469])
                            ("url" variable nil (reparse-symbol function_parameters) [29471 29474])
                            ("realm" variable nil (reparse-symbol function_parameters) [29476 29481])
                            ("data" variable nil (reparse-symbol function_parameters) [29483 29487]))                          )
                        (reparse-symbol indented_block_body) [29432 30181])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30212 30216])
                            ("url" variable nil (reparse-symbol function_parameters) [30218 30221])
                            ("realm" variable nil (reparse-symbol function_parameters) [30223 30228])
                            ("data" variable nil (reparse-symbol function_parameters) [30230 30234]))                          )
                        (reparse-symbol indented_block_body) [30186 30686])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30718 30722])
                            ("url" variable nil (reparse-symbol function_parameters) [30724 30727])
                            ("realm" variable nil (reparse-symbol function_parameters) [30729 30734])
                            ("data" variable nil (reparse-symbol function_parameters) [30736 30740]))                          )
                        (reparse-symbol indented_block_body) [30691 31193])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31218 31222])
                            ("host" variable nil (reparse-symbol function_parameters) [31224 31228])
                            ("realm" variable nil (reparse-symbol function_parameters) [31230 31235])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31237 31248]))                          )
                        (reparse-symbol indented_block_body) [31198 31613])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31641 31645])
                            ("host" variable nil (reparse-symbol function_parameters) [31647 31651])
                            ("realm" variable nil (reparse-symbol function_parameters) [31653 31658]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31618 32117]))                  
                :type "class")
                nil [23726 32117])
            ("_localhost" variable nil nil [32140 32157])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32158 32368])
            ("_thishost" variable nil nil [32369 32385])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32386 32586])
            ("_ftperrors" variable nil nil [32587 32604])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32605 32814])
            ("_noheaders" variable nil nil [32815 32832])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32833 33236])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33501 33517])
                            ("self" variable nil (reparse-symbol indented_block_body) [33526 33546])
                            ("self" variable nil (reparse-symbol indented_block_body) [33555 33571])
                            ("self" variable nil (reparse-symbol indented_block_body) [33580 33596])
                            ("self" variable nil (reparse-symbol indented_block_body) [33605 33621])
                            ("self" variable nil (reparse-symbol indented_block_body) [33630 33652])
                            ("self" variable nil (reparse-symbol indented_block_body) [33661 33678])
                            ("self" variable nil (reparse-symbol indented_block_body) [33687 33714])
                            ("self" code nil (reparse-symbol indented_block_body) [33723 33734]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33363 33367])
                            ("user" variable nil (reparse-symbol function_parameters) [33369 33373])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33375 33381])
                            ("host" variable nil (reparse-symbol function_parameters) [33383 33387])
                            ("port" variable nil (reparse-symbol function_parameters) [33389 33393])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33395 33399])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33418 33425])
                            ("persistent" variable nil (reparse-symbol function_parameters) [33475 33485]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33350 33735])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33749 33753]))                          )
                        (reparse-symbol indented_block_body) [33740 34000])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34018 34022])
                            ("file" variable nil (reparse-symbol function_parameters) [34024 34028])
                            ("type" variable nil (reparse-symbol function_parameters) [34030 34034]))                          )
                        (reparse-symbol indented_block_body) [34005 35600])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35621 35625]))                          )
                        (reparse-symbol indented_block_body) [35605 35785])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35800 35804]))                          )
                        (reparse-symbol indented_block_body) [35790 35899])
                    ("file_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35919 35923]))                          )
                        (reparse-symbol indented_block_body) [35904 36064])
                    ("real_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36084 36088]))                          )
                        (reparse-symbol indented_block_body) [36069 36205]))                  
                :type "class")
                nil [33257 36205])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36309 36321])
                            ("self" variable nil (reparse-symbol indented_block_body) [36330 36354])
                            ("self" variable nil (reparse-symbol indented_block_body) [36363 36395])
                            ("if" code nil (reparse-symbol indented_block_body) [36404 36473])
                            ("if" code nil (reparse-symbol indented_block_body) [36481 36606])
                            ("if" code nil (reparse-symbol indented_block_body) [36614 36774]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36290 36294])
                            ("fp" variable nil (reparse-symbol function_parameters) [36296 36298]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36277 36774])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36792 36796]))                          )
                        (reparse-symbol indented_block_body) [36779 36933])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36948 36952]))                          )
                        (reparse-symbol indented_block_body) [36938 37125]))                  
                :type "class")
                nil [36206 37125])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37267 37293])
                            ("self" variable nil (reparse-symbol indented_block_body) [37302 37328])
                            ("self" variable nil (reparse-symbol indented_block_body) [37337 37361]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37226 37230])
                            ("fp" variable nil (reparse-symbol function_parameters) [37232 37234])
                            ("closehook" variable nil (reparse-symbol function_parameters) [37236 37245])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [37247 37256]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37213 37362])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37377 37381]))                          )
                        (reparse-symbol indented_block_body) [37367 37549]))                  
                :type "class")
                nil [37126 37549])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37677 37703])
                            ("self" variable nil (reparse-symbol indented_block_body) [37712 37734]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37649 37653])
                            ("fp" variable nil (reparse-symbol function_parameters) [37655 37657])
                            ("headers" variable nil (reparse-symbol function_parameters) [37659 37666]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37636 37735])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37749 37753]))                          )
                        (reparse-symbol indented_block_body) [37740 37784]))                  
                :type "class")
                nil [37550 37784])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37942 37968])
                            ("self" variable nil (reparse-symbol indented_block_body) [37977 37999])
                            ("self" variable nil (reparse-symbol indented_block_body) [38008 38022])
                            ("self" variable nil (reparse-symbol indented_block_body) [38031 38047]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37898 37902])
                            ("fp" variable nil (reparse-symbol function_parameters) [37904 37906])
                            ("headers" variable nil (reparse-symbol function_parameters) [37908 37915])
                            ("url" variable nil (reparse-symbol function_parameters) [37917 37920])
                            ("code" variable nil (reparse-symbol function_parameters) [37922 37926]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37885 38048])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38062 38066]))                          )
                        (reparse-symbol indented_block_body) [38053 38097])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38114 38118]))                          )
                        (reparse-symbol indented_block_body) [38102 38146])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38162 38166]))                          )
                        (reparse-symbol indented_block_body) [38151 38193]))                  
                :type "class")
                nil [37785 38193])
            ("try" code nil nil [38932 39076])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39089 39092]))                  )
                nil [39077 39460])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39472 39475]))                  )
                nil [39461 39705])
            ("_typeprog" variable nil nil [39706 39722])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39737 39740]))                  )
                nil [39723 40076])
            ("_hostprog" variable nil nil [40077 40093])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40108 40111]))                  )
                nil [40094 40541])
            ("_userprog" variable nil nil [40542 40558])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40573 40577]))                  )
                nil [40559 40872])
            ("_passwdprog" variable nil nil [40873 40891])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [40908 40912]))                  )
                nil [40892 41196])
            ("_portprog" variable nil nil [41240 41256])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41271 41275]))                  )
                nil [41257 41542])
            ("_nportprog" variable nil nil [41543 41560])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41576 41580])
                    ("defport" variable nil (reparse-symbol function_parameters) [41582 41589]))                  )
                nil [41561 42230])
            ("_queryprog" variable nil nil [42231 42248])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42264 42267]))                  )
                nil [42249 42541])
            ("_tagprog" variable nil nil [42542 42557])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42571 42574]))                  )
                nil [42558 42833])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42848 42851]))                  )
                nil [42834 43030])
            ("_valueprog" variable nil nil [43031 43048])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [43064 43068]))                  )
                nil [43049 43341])
            ("_hexdig" variable nil nil [43534 43568])
            ("_hextochr" variable nil nil [43569 43666])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43680 43681]))                  )
                nil [43668 44062])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44080 44081]))                  )
                nil [44063 44182])
            ("always_safe" variable nil nil [44183 44305])
            ("_safe_map" variable nil nil [44306 44320])
            ("for" code nil nil [44321 44460])
            ("_safe_quoters" variable nil nil [44460 44478])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44490 44491])
                    ("safe" variable nil (reparse-symbol function_parameters) [44493 44497]))                  )
                nil [44480 45820])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45836 45837])
                    ("safe" variable nil (reparse-symbol function_parameters) [45839 45843]))                  )
                nil [45821 46028])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [46043 46048])
                    ("doseq" variable nil (reparse-symbol function_parameters) [46050 46055]))                  )
                nil [46029 48456])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [48474 48987])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [49017 49021]))                  )
                nil [48988 49762])
            ("if" code nil nil [49764 57175])
            ("test1" function nil nil [57214 57504])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [57521 57529])
                ("blocksize" variable nil (reparse-symbol function_parameters) [57531 57540])
                ("totalsize" variable nil (reparse-symbol function_parameters) [57542 57551]))              ) nil [57506 57696]))          
    :file "urllib.py"
    :pointmax 57696
    :fsize 57695
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((NAME 44384 . 44393) (IF 44401 . 44403) (ELSE 44435 . 44439))
    )
   (semanticdb-table "cgi.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Support module for CGI (Common Gateway Interface) scripts.

This module defines a number of utilities for use by CGI scripts
written in Python.
\"\"\"" code nil nil [512 662])
            ("__version__" variable nil nil [1143 1162])
            ("operator" include nil nil [1186 1217])
            ("sys" include nil nil [1218 1228])
            ("os" include nil nil [1229 1238])
            ("urllib" include nil nil [1239 1252])
            ("UserDict" include nil nil [1253 1268])
            ("urlparse" include nil nil [1269 1284])
            ("warnings" include nil nil [1286 1343])
            ("with" code nil nil [1344 1643])
            ("try" code nil nil [1644 1738])
            ("__all__" variable nil nil [1739 2110])
            ("logfile" variable nil nil [2149 2161])
            ("logfp" variable nil nil [2208 2220])
            ("initlog" function
               (:documentation "Write a log message, if there is a log file.

    Even though this function is called initlog(), you should always
    use log(); log is a variable that is set either to initlog
    (initially), to dolog (once the log file has been opened), or to
    nolog (when logging is disabled).

    The first argument is a format string; the remaining arguments (if
    any) are arguments to the % operator, so e.g.
        log(\"%s: %s\", \"a\", \"b\")
    will write \"a: b\" to the log file, followed by a newline.

    If the global logfp is not None, it should be a file object to
    which log data is written.

    If the global logfp is None, the global logfile may be a string
    giving a filename to open, in append mode.  This file should be
    world writable!!!  If the file can't be opened, logging is
    silently disabled (since there is no safe place where we could
    send an error message).

    "
                :arguments 
                  ( ("allargs" variable nil (reparse-symbol function_parameters) [2282 2290]))                  )
                nil [2270 3435])
            ("dolog" function
               (:documentation "Write a log message to the log file.  See initlog() for docs."
                :arguments 
                  ( ("fmt" variable nil (reparse-symbol function_parameters) [3446 3449])
                    ("args" variable nil (reparse-symbol function_parameters) [3451 3456]))                  )
                nil [3436 3564])
            ("nolog" function
               (:documentation "Dummy function, assigned to log when logging is disabled."
                :arguments 
                  ( ("allargs" variable nil (reparse-symbol function_parameters) [3575 3583]))                  )
                nil [3565 3663])
            ("log" variable nil nil [3664 3677])
            ("maxlen" variable nil nil [3845 3855])
            ("parse" function
               (:documentation "Parse a query in the environment or from a file (default stdin)

        Arguments, all optional:

        fp              : file pointer; default: sys.stdin

        environ         : environment dictionary; default: os.environ

        keep_blank_values: flag indicating whether blank values in
            percent-encoded forms should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("fp" variable nil (reparse-symbol function_parameters) [3867 3869])
                    ("environ" variable nil (reparse-symbol function_parameters) [3876 3883])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [3896 3913])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [3917 3931]))                  )
                nil [3857 6010])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument."
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [6137 6139])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [6141 6158])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [6162 6176]))                  )
                nil [6124 6410])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument."
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [6426 6428])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [6430 6447])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [6451 6465]))                  )
                nil [6412 6702])
            ("parse_multipart" function
               (:documentation "Parse multipart input.

    Arguments:
    fp   : input file
    pdict: dictionary containing other parameters of content-type header

    Returns a dictionary just like parse_qs(): keys are the field names, each
    value is a list of values for that field.  This is easy to use but not
    much good if you are expecting megabytes to be uploaded -- in that case,
    use the FieldStorage class instead which is much more flexible.  Note
    that content-type is the raw, unparsed contents of the content-type
    header.

    XXX This does not parse nested multipart parts -- use FieldStorage for
    that.

    XXX This should really be subsumed by FieldStorage altogether -- no
    point in having two implementations of the same parsing algorithm.
    Also, FieldStorage protects itself better against certain DoS attacks
    by limiting the size of the data read in one chunk.  The API here
    does not support that kind of protection.  This also affects parse()
    since it can call parse_multipart().

    "
                :arguments 
                  ( ("fp" variable nil (reparse-symbol function_parameters) [6723 6725])
                    ("pdict" variable nil (reparse-symbol function_parameters) [6727 6732]))                  )
                nil [6703 9968])
            ("_parseparam" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9986 9987]))              ) nil [9970 10285])
            ("parse_header" function
               (:documentation "Parse a Content-type like header.

    Return the main content-type and a dictionary of options.

    "
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [10303 10307]))                  )
                nil [10286 26623])
            ("FormContentDict" type
               (:documentation "Form content as dictionary with a list of values per field.

    form = FormContentDict()

    form[key] -> [value, value, ...]
    key in form -> Boolean
    form.keys() -> [key, key, ...]
    form.values() -> [[val, val, ...], [val, val, ...], ...]
    form.items() ->  [(key, [val, val, ...]), (key, [val, val, ...]), ...]
    form.dict == {key: [val, val, ...], ...}

    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [27215 27405])
                            ("self" variable nil (reparse-symbol indented_block_body) [27414 27457]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27141 27145])
                            ("environ" variable nil (reparse-symbol function_parameters) [27147 27154])
                            ("keep_blank_values" variable nil (reparse-symbol function_parameters) [27167 27184])
                            ("strict_parsing" variable nil (reparse-symbol function_parameters) [27188 27202]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27128 27458]))                  
                :type "class")
                nil [26695 27458])
            ("SvFormContentDict" type
               (:documentation "Form content as dictionary expecting a single value per field.

    If you only expect a single value for each field, then form[key]
    will return that single value.  It will raise an IndexError if
    that expectation is not true.  If you expect a field to have
    possible multiple values, than you can use form.getlist(key) to
    get all of the values.  values() and items() are a compromise:
    they return single strings where there is a single value, and
    lists of strings otherwise.

    "
                :superclasses ("FormContentDict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28036 28040])
                            ("key" variable nil (reparse-symbol function_parameters) [28042 28045]))                          )
                        (reparse-symbol indented_block_body) [28020 28174])
                    ("getlist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28190 28194])
                            ("key" variable nil (reparse-symbol function_parameters) [28196 28199]))                          )
                        (reparse-symbol indented_block_body) [28178 28232])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28247 28251]))                          )
                        (reparse-symbol indented_block_body) [28236 28448])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28462 28466]))                          )
                        (reparse-symbol indented_block_body) [28452 28681]))                  
                :type "class")
                nil [27460 28681])
            ("InterpFormContentDict" type
               (:documentation "This class is present for backwards compatibility only."
                :superclasses ("SvFormContentDict")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28817 28821])
                            ("key" variable nil (reparse-symbol function_parameters) [28823 28826]))                          )
                        (reparse-symbol indented_block_body) [28801 29082])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29097 29101]))                          )
                        (reparse-symbol indented_block_body) [29086 29313])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29327 29331]))                          )
                        (reparse-symbol indented_block_body) [29317 29557]))                  
                :type "class")
                nil [28683 29557])
            ("FormContent" type
               (:documentation "This class is present for backwards compatibility only."
                :superclasses ("FormContentDict")
                :members 
                  ( ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29676 29680])
                            ("key" variable nil (reparse-symbol function_parameters) [29682 29685]))                          )
                        (reparse-symbol indented_block_body) [29665 29765])
                    ("indexed_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29787 29791])
                            ("key" variable nil (reparse-symbol function_parameters) [29793 29796])
                            ("location" variable nil (reparse-symbol function_parameters) [29798 29806]))                          )
                        (reparse-symbol indented_block_body) [29769 29989])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30003 30007])
                            ("key" variable nil (reparse-symbol function_parameters) [30009 30012]))                          )
                        (reparse-symbol indented_block_body) [29993 30095])
                    ("length" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30110 30114])
                            ("key" variable nil (reparse-symbol function_parameters) [30116 30119]))                          )
                        (reparse-symbol indented_block_body) [30099 30157])
                    ("stripped" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30174 30178])
                            ("key" variable nil (reparse-symbol function_parameters) [30180 30183]))                          )
                        (reparse-symbol indented_block_body) [30161 30274])
                    ("pars" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30287 30291]))                          )
                        (reparse-symbol indented_block_body) [30278 30319]))                  
                :type "class")
                nil [29559 30319])
            ("test" function
               (:documentation "Robust test CGI script, usable as main program.

    Write minimal HTTP headers and dump all information provided to
    the script in HTML form.

    "
                :arguments 
                  ( ("environ" variable nil (reparse-symbol function_parameters) [30367 30374]))                  )
                nil [30358 31408])
            ("print_exception" function (:arguments 
              ( ("type" variable nil (reparse-symbol function_parameters) [31429 31433])
                ("value" variable nil (reparse-symbol function_parameters) [31440 31445])
                ("tb" variable nil (reparse-symbol function_parameters) [31452 31454])
                ("limit" variable nil (reparse-symbol function_parameters) [31461 31466]))              ) nil [31409 31847])
            ("print_environ" function
               (:documentation "Dump the shell environment as HTML."
                :arguments 
                  ( ("environ" variable nil (reparse-symbol function_parameters) [31866 31873]))                  )
                nil [31848 32155])
            ("print_form" function
               (:documentation "Dump the contents of a form as HTML."
                :arguments 
                  ( ("form" variable nil (reparse-symbol function_parameters) [32171 32175]))                  )
                nil [32156 32596])
            ("print_directory" function (:documentation "Dump the current directory as HTML.") nil [32597 32875])
            ("print_arguments" function nil nil [32876 32993])
            ("print_environ_usage" function (:documentation "Dump a list of environment variables used by CGI as HTML.") nil [32994 33834])
            ("escape" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [33872 33873])
                ("quote" variable nil (reparse-symbol function_parameters) [33875 33880]))              ) nil [33861 34243])
            ("valid_boundary" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [34263 34264])
                ("_vb_pattern" variable nil (reparse-symbol function_parameters) [34266 34277]))              ) nil [34244 34352])
            ("if" code nil nil [34465 34503]))          
    :file "cgi.py"
    :pointmax 34503
    :fsize 34502
    :lastmodtime '(21263 41014 0 0)
    :unmatched-syntax '((INDENT_BLOCK 15671 . 18013) (INDENT_BLOCK 15349 . 15671) (INDENT_BLOCK 15271 . 15349) (ASSIGN 10834 . 10835) (RBRACK 10832 . 10833) (DEDENT 10810 . 10822) (NAME 10822 . 10827) (LBRACK 10827 . 10828))
    )
   (semanticdb-table "shutil.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 727])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [764 768]))                  
                :type "class")
                nil [729 769])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [770 947])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [948 1037])
            ("try" code nil nil [1038 1102])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1119 1123])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1125 1129])
                    ("length" variable nil (reparse-symbol function_parameters) [1131 1137]))                  )
                nil [1103 1327])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1342 1345])
                ("dst" variable nil (reparse-symbol function_parameters) [1347 1350]))              ) nil [1328 1680])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1694 1697])
                    ("dst" variable nil (reparse-symbol function_parameters) [1699 1702]))                  )
                nil [1681 2298])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2312 2315])
                    ("dst" variable nil (reparse-symbol function_parameters) [2317 2320]))                  )
                nil [2299 2487])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2501 2504])
                    ("dst" variable nil (reparse-symbol function_parameters) [2506 2509]))                  )
                nil [2488 3048])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3058 3061])
                    ("dst" variable nil (reparse-symbol function_parameters) [3063 3066]))                  )
                nil [3049 3294])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3305 3308])
                    ("dst" variable nil (reparse-symbol function_parameters) [3310 3313]))                  )
                nil [3295 3548])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3569 3578]))                  )
                nil [3549 3961])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3975 3978])
                    ("dst" variable nil (reparse-symbol function_parameters) [3980 3983])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [3985 3993])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4001 4007]))                  )
                nil [3962 6301])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6313 6317])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6319 6332])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6340 6347]))                  )
                nil [6302 7925])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [7941 7945]))              ) nil [7927 8159])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8169 8172])
                    ("dst" variable nil (reparse-symbol function_parameters) [8174 8177]))                  )
                nil [8160 9616])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9632 9635])
                ("dst" variable nil (reparse-symbol function_parameters) [9637 9640]))              ) nil [9617 9850])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9864 9868]))                  )
                nil [9851 10129])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10143 10147]))                  )
                nil [10130 10408])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10427 10436])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10438 10446])
                    ("compress" variable nil (reparse-symbol function_parameters) [10448 10456])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10465 10472])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10476 10483])
                    ("owner" variable nil (reparse-symbol function_parameters) [10505 10510])
                    ("group" variable nil (reparse-symbol function_parameters) [10517 10522])
                    ("logger" variable nil (reparse-symbol function_parameters) [10529 10535]))                  )
                nil [10409 12411])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12435 12443])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12445 12457])
                ("verbose" variable nil (reparse-symbol function_parameters) [12459 12466])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12474 12481]))              ) nil [12412 13141])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13160 13169])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13171 13179])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13181 13188])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13192 13199])
                    ("logger" variable nil (reparse-symbol function_parameters) [13203 13209]))                  )
                nil [13142 14849])
            ("_ARCHIVE_FORMATS" variable nil nil [14850 15147])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15149 15468])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [15497 15501])
                    ("function" variable nil (reparse-symbol function_parameters) [15503 15511])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [15513 15523])
                    ("description" variable nil (reparse-symbol function_parameters) [15530 15541]))                  )
                nil [15469 16460])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16491 16495]))              ) nil [16461 16529])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [16547 16556])
                    ("format" variable nil (reparse-symbol function_parameters) [16558 16564])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [16566 16574])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [16581 16589])
                    ("verbose" variable nil (reparse-symbol function_parameters) [16596 16603])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [16624 16631])
                    ("owner" variable nil (reparse-symbol function_parameters) [16635 16640])
                    ("group" variable nil (reparse-symbol function_parameters) [16647 16652])
                    ("logger" variable nil (reparse-symbol function_parameters) [16659 16665]))                  )
                nil [16530 18367]))          
    :file "shutil.py"
    :pointmax 18367
    :fsize 18366
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "mimetypes.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Guess the MIME type of a file.

This module defines two useful functions:

guess_type(url, strict=1) -- guess the MIME type and encoding of a URL.

guess_extension(type, strict=1) -- guess the extension for a given MIME type.

It also contains the following, for tuning the behavior:

Data:

knownfiles -- list of files to parse
inited -- flag set when init() has been called
suffix_map -- dictionary mapping suffixes to suffixes
encodings_map -- dictionary mapping suffixes to encodings
types_map -- dictionary mapping suffixes to types

Functions:

init([files]) -- parse a list of files, default knownfiles (on Windows, the
  default values are taken from the registry)
read_mime_types(file) -- parse one file, return a dictionary or None
\"\"\"" code nil nil [1 749])
            ("os" include nil nil [751 760])
            ("sys" include nil nil [761 771])
            ("posixpath" include nil nil [772 788])
            ("urllib" include nil nil [789 802])
            ("try" code nil nil [803 866])
            ("__all__" variable nil nil [867 979])
            ("knownfiles" variable nil nil [981 1466])
            ("inited" variable nil nil [1468 1482])
            ("_db" variable nil nil [1483 1493])
            ("MimeTypes" type
               (:documentation "MIME-types datastore.

    This datastore can handle information from mime.types-style files
    and supports basic determination of MIME type from a filename or
    URL, and can guess a reasonable extension given a MIME type.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1815 1849])
                            ("self" variable nil (reparse-symbol indented_block_body) [1857 1898])
                            ("self" variable nil (reparse-symbol indented_block_body) [1907 1942])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1976])
                            ("self" variable nil (reparse-symbol indented_block_body) [2017 2046])
                            ("for" code nil (reparse-symbol indented_block_body) [2055 2136])
                            ("for" code nil (reparse-symbol indented_block_body) [2144 2229])
                            ("for" code nil (reparse-symbol indented_block_body) [2237 2296]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1773 1777])
                            ("filenames" variable nil (reparse-symbol function_parameters) [1779 1788])
                            ("strict" variable nil (reparse-symbol function_parameters) [1793 1799]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1760 2296])
                    ("add_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2314 2318])
                            ("type" variable nil (reparse-symbol function_parameters) [2320 2324])
                            ("ext" variable nil (reparse-symbol function_parameters) [2326 2329])
                            ("strict" variable nil (reparse-symbol function_parameters) [2331 2337]))                          
                        :documentation "Add a mapping between a type and an extension.

        When the extension is already known, the new
        type will replace the old one. When the type
        is already known the extension will be added
        to the list of known extensions.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [2301 2916])
                    ("guess_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2936 2940])
                            ("url" variable nil (reparse-symbol function_parameters) [2942 2945])
                            ("strict" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :documentation "Guess the type of a file based on its URL.

        Return value is a tuple (type, encoding) where type is None if
        the type can't be guessed (no or unknown suffix) or a string
        of the form type/subtype, usable for a MIME Content-type
        header; and encoding is None for no encoding or the name of
        the program used to encode (e.g. compress or gzip).  The
        mappings are table driven.  Encoding suffixes are case
        sensitive; type suffixes are first tried case sensitive, then
        case insensitive.

        The suffixes .tgz, .taz and .tz (case sensitive!) are all
        mapped to '.tar.gz'.  (This is table-driven too, using the
        dictionary suffix_map.)

        Optional `strict' argument when False adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [2921 5472])
                    ("guess_all_extensions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5502 5506])
                            ("type" variable nil (reparse-symbol function_parameters) [5508 5512])
                            ("strict" variable nil (reparse-symbol function_parameters) [5514 5520]))                          
                        :documentation "Guess the extensions for a file based on its MIME type.

        Return value is a list of strings giving the possible filename
        extensions, including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data stream,
        but would be mapped to the MIME type `type' by guess_type().

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [5477 6296])
                    ("guess_extension" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6321 6325])
                            ("type" variable nil (reparse-symbol function_parameters) [6327 6331])
                            ("strict" variable nil (reparse-symbol function_parameters) [6333 6339]))                          
                        :documentation "Guess the extension for a file based on its MIME type.

        Return value is a string giving a filename extension,
        including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data
        stream, but would be mapped to the MIME type `type' by
        guess_type().  If no extension can be guessed for `type', None
        is returned.

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [6301 7026])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7040 7044])
                            ("filename" variable nil (reparse-symbol function_parameters) [7046 7054])
                            ("strict" variable nil (reparse-symbol function_parameters) [7056 7062]))                          
                        :documentation "
        Read a single mime.types-format file, specified by pathname.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7031 7371])
                    ("readfp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7387 7391])
                            ("fp" variable nil (reparse-symbol function_parameters) [7393 7395])
                            ("strict" variable nil (reparse-symbol function_parameters) [7397 7403]))                          
                        :documentation "
        Read a single mime.types-format file.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7376 8077])
                    ("read_windows_registry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8108 8112])
                            ("strict" variable nil (reparse-symbol function_parameters) [8114 8120]))                          
                        :documentation "
        Load the MIME types database from Windows registry.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [8082 9698]))                  
                :type "class")
                nil [1496 9698])
            ("guess_type" function
               (:documentation "Guess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to \".tar.gz\".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [9715 9718])
                    ("strict" variable nil (reparse-symbol function_parameters) [9720 9726]))                  )
                nil [9700 10585])
            ("guess_all_extensions" function
               (:documentation "Guess the extensions for a file based on its MIME type.

    Return value is a list of strings giving the possible filename
    extensions, including the leading dot ('.').  The extension is not
    guaranteed to have been associated with any particular data
    stream, but would be mapped to the MIME type `type' by
    guess_type().  If no extension can be guessed for `type', None
    is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [10612 10616])
                    ("strict" variable nil (reparse-symbol function_parameters) [10618 10624]))                  )
                nil [10587 11237])
            ("guess_extension" function
               (:documentation "Guess the extension for a file based on its MIME type.

    Return value is a string giving a filename extension, including the
    leading dot ('.').  The extension is not guaranteed to have been
    associated with any particular data stream, but would be mapped to the
    MIME type `type' by guess_type().  If no extension can be guessed for
    `type', None is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11258 11262])
                    ("strict" variable nil (reparse-symbol function_parameters) [11264 11270]))                  )
                nil [11238 11852])
            ("add_type" function
               (:documentation "Add a mapping between a type and an extension.

    When the extension is already known, the new
    type will replace the old one. When the type
    is already known the extension will be added
    to the list of known extensions.

    If strict is true, information will be added to
    list of standard types, else to the list of non-standard
    types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11866 11870])
                    ("ext" variable nil (reparse-symbol function_parameters) [11872 11875])
                    ("strict" variable nil (reparse-symbol function_parameters) [11877 11883]))                  )
                nil [11853 12341])
            ("init" function (:arguments 
              ( ("files" variable nil (reparse-symbol function_parameters) [12352 12357]))              ) nil [12343 12959])
            ("read_mime_types" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [12981 12985]))              ) nil [12961 13134])
            ("_default_mime_types" function nil nil [13136 19267])
            ("_default_mime_types" code nil nil [19269 19290])
            ("if" code nil nil [19293 20610]))          
    :file "mimetypes.py"
    :pointmax 20610
    :fsize 20609
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "base64.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [24 77])
            ("re" include nil nil [209 218])
            ("struct" include nil nil [219 232])
            ("binascii" include nil nil [233 248])
            ("__all__" variable nil nil [251 825])
            ("_translation" variable nil nil [827 872])
            ("EMPTYSTRING" variable nil nil [873 889])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [907 908])
                ("altchars" variable nil (reparse-symbol function_parameters) [910 918]))              ) nil [892 1066])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1126 1127])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1129 1137]))                  )
                nil [1112 1720])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1736 1737])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1739 1747]))                  )
                nil [1722 2432])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2457 2458]))                  )
                nil [2434 2617])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2641 2642]))                  )
                nil [2618 2938])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2961 2962]))                  )
                nil [2939 3191])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3214 3215]))                  )
                nil [3192 3583])
            ("_b32alphabet" variable nil nil [3637 3974])
            ("_b32tab" variable nil nil [3976 4006])
            ("_b32tab" code nil nil [4007 4021])
            ("_b32tab" variable nil nil [4022 4055])
            ("_b32rev" variable nil nil [4056 4119])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4136 4137]))                  )
                nil [4122 5899])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5915 5916])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5918 5926])
                    ("map01" variable nil (reparse-symbol function_parameters) [5934 5939]))                  )
                nil [5901 8385])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8559 8560]))                  )
                nil [8545 8712])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8728 8729])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8731 8739]))                  )
                nil [8714 9290])
            ("MAXLINESIZE" variable nil nil [9453 9469])
            ("MAXBINSIZE" code nil nil [9491 9522])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9535 9540])
                    ("output" variable nil (reparse-symbol function_parameters) [9542 9548]))                  )
                nil [9524 9875])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9888 9893])
                    ("output" variable nil (reparse-symbol function_parameters) [9895 9901]))                  )
                nil [9877 10078])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10097 10098]))                  )
                nil [10080 10338])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10357 10358]))                  )
                nil [10340 10422])
            ("test" function (:documentation "Small test program") nil [10451 11192])
            ("test1" function nil nil [11194 11317])
            ("if" code nil nil [11319 11357]))          
    :file "base64.py"
    :pointmax 11357
    :fsize 11356
    :lastmodtime '(21263 41017 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "CGIHTTPServer.py"
    :file "CGIHTTPServer.py"
    :fsize 12986
    :lastmodtime '(21263 40993 0 0)
    )
   (semanticdb-table "UserDict.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"A more or less complete user-defined wrapper around dictionary objects.\"\"\"" code nil nil [1 78])
            ("UserDict" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [149 163])
                            ("if" code nil (reparse-symbol indented_block_body) [172 223])
                            ("if" code nil (reparse-symbol indented_block_body) [231 279]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113 117])
                            ("dict" variable nil (reparse-symbol function_parameters) [119 123])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [130 138]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100 279])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [296 300]))                          )
                        (reparse-symbol indented_block_body) [283 326])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [342 346])
                            ("dict" variable nil (reparse-symbol function_parameters) [348 352]))                          )
                        (reparse-symbol indented_block_body) [330 493])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [497 512])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [550 554]))                          )
                        (reparse-symbol indented_block_body) [538 579])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [599 603])
                            ("key" variable nil (reparse-symbol function_parameters) [605 608]))                          )
                        (reparse-symbol indented_block_body) [583 810])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [830 834])
                            ("key" variable nil (reparse-symbol function_parameters) [836 839])
                            ("item" variable nil (reparse-symbol function_parameters) [841 845]))                          )
                        (reparse-symbol indented_block_body) [814 870])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [890 894])
                            ("key" variable nil (reparse-symbol function_parameters) [896 899]))                          )
                        (reparse-symbol indented_block_body) [874 921])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [935 939]))                          )
                        (reparse-symbol indented_block_body) [925 960])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977]))                          )
                        (reparse-symbol indented_block_body) [964 1268])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1281 1285]))                          )
                        (reparse-symbol indented_block_body) [1272 1312])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1326 1330]))                          )
                        (reparse-symbol indented_block_body) [1316 1358])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1376 1380]))                          )
                        (reparse-symbol indented_block_body) [1362 1412])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1429 1433]))                          )
                        (reparse-symbol indented_block_body) [1416 1464])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1483 1487]))                          )
                        (reparse-symbol indented_block_body) [1468 1520])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1535 1539]))                          )
                        (reparse-symbol indented_block_body) [1524 1568])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1584 1588])
                            ("key" variable nil (reparse-symbol function_parameters) [1590 1593]))                          )
                        (reparse-symbol indented_block_body) [1572 1620])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1635 1639])
                            ("dict" variable nil (reparse-symbol function_parameters) [1641 1645])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1652 1660]))                          )
                        (reparse-symbol indented_block_body) [1624 2033])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2045 2049])
                            ("key" variable nil (reparse-symbol function_parameters) [2051 2054])
                            ("failobj" variable nil (reparse-symbol function_parameters) [2056 2063]))                          )
                        (reparse-symbol indented_block_body) [2037 2151])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2170 2174])
                            ("key" variable nil (reparse-symbol function_parameters) [2176 2179])
                            ("failobj" variable nil (reparse-symbol function_parameters) [2181 2188]))                          )
                        (reparse-symbol indented_block_body) [2155 2281])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("key" variable nil (reparse-symbol function_parameters) [2299 2302])
                            ("args" variable nil (reparse-symbol function_parameters) [2304 2309]))                          )
                        (reparse-symbol indented_block_body) [2285 2353])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2357 2411])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2432 2436])
                            ("key" variable nil (reparse-symbol function_parameters) [2438 2441]))                          )
                        (reparse-symbol indented_block_body) [2415 2476])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2510 2513])
                            ("iterable" variable nil (reparse-symbol function_parameters) [2515 2523])
                            ("value" variable nil (reparse-symbol function_parameters) [2525 2530]))                          )
                        (reparse-symbol indented_block_body) [2480 2629]))                  
                :type "class")
                nil [80 2629])
            ("IterableUserDict" type
               (:superclasses ("UserDict")
                :members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2681 2685]))                          )
                        (reparse-symbol indented_block_body) [2668 2719]))                  
                :type "class")
                nil [2630 2719])
            ("_abcoll" include nil nil [2720 2734])
            ("_abcoll" code nil nil [2735 2784])
            ("DictMixin" type
               (:members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3286 3290]))                          )
                        (reparse-symbol indented_block_body) [3273 3343])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3359 3363])
                            ("key" variable nil (reparse-symbol function_parameters) [3365 3368]))                          )
                        (reparse-symbol indented_block_body) [3347 3476])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3497 3501])
                            ("key" variable nil (reparse-symbol function_parameters) [3503 3506]))                          )
                        (reparse-symbol indented_block_body) [3480 3542])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3623 3627]))                          )
                        (reparse-symbol indented_block_body) [3609 3684])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3701 3705]))                          )
                        (reparse-symbol indented_block_body) [3688 3739])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3813 3817]))                          )
                        (reparse-symbol indented_block_body) [3798 3878])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3893 3897]))                          )
                        (reparse-symbol indented_block_body) [3882 3948])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3962 3966]))                          )
                        (reparse-symbol indented_block_body) [3952 4007])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4021 4025]))                          )
                        (reparse-symbol indented_block_body) [4011 4086])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4105 4109])
                            ("key" variable nil (reparse-symbol function_parameters) [4111 4114])
                            ("default" variable nil (reparse-symbol function_parameters) [4116 4123]))                          )
                        (reparse-symbol indented_block_body) [4090 4253])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4265 4269])
                            ("key" variable nil (reparse-symbol function_parameters) [4271 4274])
                            ("args" variable nil (reparse-symbol function_parameters) [4276 4281]))                          )
                        (reparse-symbol indented_block_body) [4257 4614])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4630 4634]))                          )
                        (reparse-symbol indented_block_body) [4618 4814])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4829 4833])
                            ("other" variable nil (reparse-symbol function_parameters) [4835 4840])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4847 4855]))                          )
                        (reparse-symbol indented_block_body) [4818 5345])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5357 5361])
                            ("key" variable nil (reparse-symbol function_parameters) [5363 5366])
                            ("default" variable nil (reparse-symbol function_parameters) [5368 5375]))                          )
                        (reparse-symbol indented_block_body) [5349 5477])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5494 5498]))                          )
                        (reparse-symbol indented_block_body) [5481 5545])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5561 5565])
                            ("other" variable nil (reparse-symbol function_parameters) [5567 5572]))                          )
                        (reparse-symbol indented_block_body) [5549 5757])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5773 5777]))                          )
                        (reparse-symbol indented_block_body) [5761 5812]))                  
                :type "class")
                nil [2787 5812]))          
    :file "UserDict.py"
    :pointmax 5812
    :fsize 5811
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "urlparse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("__all__" variable nil nil [1132 1254])
            ("uses_relative" variable nil nil [1314 1522])
            ("uses_netloc" variable nil nil [1523 1774])
            ("non_hierarchical" variable nil nil [1775 1899])
            ("uses_params" variable nil nil [1900 2055])
            ("uses_query" variable nil nil [2056 2178])
            ("uses_fragment" variable nil nil [2179 2336])
            ("scheme_chars" variable nil nil [2373 2514])
            ("MAX_CACHE_SIZE" variable nil nil [2516 2535])
            ("_parse_cache" variable nil nil [2536 2553])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2555 2632])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2749 2753]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2722 2992])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3024 3028]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2997 3235])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3267 3271]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3240 3589])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3617 3621]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3594 3820]))                  
                :type "class")
                nil [2634 3820])
            ("collections" include nil nil [3821 3855])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3958 3972])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3989 3993]))                          )
                        (reparse-symbol indented_block_body) [3978 4028]))                  
                :type "class")
                nil [3857 4028])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4138 4152])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4169 4173]))                          )
                        (reparse-symbol indented_block_body) [4158 4208]))                  
                :type "class")
                nil [4030 4208])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4223 4226])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4228 4234])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4239 4254]))                  )
                nil [4210 4848])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4866 4869]))              ) nil [4849 5045])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5063 5066])
                ("start" variable nil (reparse-symbol function_parameters) [5068 5073]))              ) nil [5046 5494])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5508 5511])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5513 5519])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5524 5539]))                  )
                nil [5495 7756])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7772 7776]))                  )
                nil [7757 8211])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8227 8231]))                  )
                nil [8212 8983])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [8996 9000])
                    ("url" variable nil (reparse-symbol function_parameters) [9002 9005])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [9007 9022]))                  )
                nil [8984 10786])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [10801 10804]))                  )
                nil [10787 11182])
            ("_hexdig" variable nil nil [11462 11496])
            ("_hextochr" variable nil nil [11497 11589])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11603 11604]))                  )
                nil [11591 11985])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [11999 12001])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12003 12020])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12024 12038]))                  )
                nil [11986 12956])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12971 12973])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12975 12992])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12996 13010]))                  )
                nil [12957 14415]))          
    :file "urlparse.py"
    :pointmax 14415
    :fsize 14414
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((COMMA 4117 . 4118) (NAME 4048 . 4058) (PAREN_BLOCK 4058 . 4117) (COMMA 3937 . 3938) (NAME 3875 . 3885) (PAREN_BLOCK 3885 . 3937))
    )
   (semanticdb-table "string.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
    :file "string.py"
    :pointmax 20757
    :fsize 20756
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "_abcoll.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 1936])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          )
                        (reparse-symbol indented_block_body) [1941 1981])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2024 2027])
                            ("C" variable nil (reparse-symbol function_parameters) [2029 2030]))                          )
                        (reparse-symbol indented_block_body) [1986 2183]))                  
                :type "class")
                nil [1841 2183])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2202 2225])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2263 2267]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2231 2287])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2330 2333])
                            ("C" variable nil (reparse-symbol function_parameters) [2335 2336]))                          )
                        (reparse-symbol indented_block_body) [2292 2461]))                  
                :type "class")
                nil [2185 2461])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2484 2507])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2550 2554])
                            ("x" variable nil (reparse-symbol function_parameters) [2556 2557]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2513 2581])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2624 2627])
                            ("C" variable nil (reparse-symbol function_parameters) [2629 2630]))                          )
                        (reparse-symbol indented_block_body) [2586 2764]))                  
                :type "class")
                nil [2463 2764])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2786 2809])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2848 2852])
                            ("args" variable nil (reparse-symbol function_parameters) [2854 2859])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2861 2867]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2815 2891])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2934 2937])
                            ("C" variable nil (reparse-symbol function_parameters) [2939 2940]))                          )
                        (reparse-symbol indented_block_body) [2896 3069]))                  
                :type "class")
                nil [2766 3069])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("other" variable nil (reparse-symbol function_parameters) [3518 3523]))                          )
                        (reparse-symbol indented_block_body) [3501 3768])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3784 3788])
                            ("other" variable nil (reparse-symbol function_parameters) [3790 3795]))                          )
                        (reparse-symbol indented_block_body) [3773 3932])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3948 3952])
                            ("other" variable nil (reparse-symbol function_parameters) [3954 3959]))                          )
                        (reparse-symbol indented_block_body) [3937 4063])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4079 4083])
                            ("other" variable nil (reparse-symbol function_parameters) [4085 4090]))                          )
                        (reparse-symbol indented_block_body) [4068 4195])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4211 4215])
                            ("other" variable nil (reparse-symbol function_parameters) [4217 4222]))                          )
                        (reparse-symbol indented_block_body) [4200 4360])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4376 4380])
                            ("other" variable nil (reparse-symbol function_parameters) [4382 4387]))                          )
                        (reparse-symbol indented_block_body) [4365 4425])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4466 4469])
                            ("it" variable nil (reparse-symbol function_parameters) [4471 4473]))                          )
                        (reparse-symbol indented_block_body) [4430 4702])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4719 4723])
                            ("other" variable nil (reparse-symbol function_parameters) [4725 4730]))                          )
                        (reparse-symbol indented_block_body) [4707 4889])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4909 4913])
                            ("other" variable nil (reparse-symbol function_parameters) [4915 4920]))                          )
                        (reparse-symbol indented_block_body) [4894 5030])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5046 5050])
                            ("other" variable nil (reparse-symbol function_parameters) [5052 5057]))                          )
                        (reparse-symbol indented_block_body) [5035 5234])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5251 5255])
                            ("other" variable nil (reparse-symbol function_parameters) [5257 5262]))                          )
                        (reparse-symbol indented_block_body) [5239 5554])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5571 5575])
                            ("other" variable nil (reparse-symbol function_parameters) [5577 5582]))                          )
                        (reparse-symbol indented_block_body) [5559 5804])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [5880 5895])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5911 5915]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [5901 6904]))                  
                :type "class")
                nil [3086 6904])
            ("Set" code nil nil [6905 6928])
            ("MutableSet" type
               (:superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6987 6991])
                            ("value" variable nil (reparse-symbol function_parameters) [6993 6998]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [6959 7065])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7102 7106])
                            ("value" variable nil (reparse-symbol function_parameters) [7108 7113]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7070 7221])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("value" variable nil (reparse-symbol function_parameters) [7243 7248]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7226 7411])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7424 7428]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7416 7668])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7683 7687]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [7673 7865])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7882 7886])
                            ("it" variable nil (reparse-symbol function_parameters) [7888 7890]))                          )
                        (reparse-symbol indented_block_body) [7870 7966])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7984 7988])
                            ("it" variable nil (reparse-symbol function_parameters) [7990 7992]))                          )
                        (reparse-symbol indented_block_body) [7971 8081])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8099 8103])
                            ("it" variable nil (reparse-symbol function_parameters) [8105 8107]))                          )
                        (reparse-symbol indented_block_body) [8086 8438])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8456 8460])
                            ("it" variable nil (reparse-symbol function_parameters) [8462 8464]))                          )
                        (reparse-symbol indented_block_body) [8443 8614]))                  
                :type "class")
                nil [6931 8614])
            ("MutableSet" code nil nil [8615 8639])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8745 8749])
                            ("key" variable nil (reparse-symbol function_parameters) [8751 8754]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8709 8780])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8793 8797])
                            ("key" variable nil (reparse-symbol function_parameters) [8799 8802])
                            ("default" variable nil (reparse-symbol function_parameters) [8804 8811]))                          )
                        (reparse-symbol indented_block_body) [8785 8913])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8935 8939])
                            ("key" variable nil (reparse-symbol function_parameters) [8941 8944]))                          )
                        (reparse-symbol indented_block_body) [8918 9070])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9088 9092]))                          )
                        (reparse-symbol indented_block_body) [9075 9121])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9141 9145]))                          )
                        (reparse-symbol indented_block_body) [9126 9201])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9220 9224]))                          )
                        (reparse-symbol indented_block_body) [9206 9287])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9301 9305]))                          )
                        (reparse-symbol indented_block_body) [9292 9334])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9349 9353]))                          )
                        (reparse-symbol indented_block_body) [9339 9406])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9422 9426]))                          )
                        (reparse-symbol indented_block_body) [9411 9472])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9552 9567])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9584 9588])
                            ("other" variable nil (reparse-symbol function_parameters) [9590 9595]))                          )
                        (reparse-symbol indented_block_body) [9573 9732])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9748 9752])
                            ("other" variable nil (reparse-symbol function_parameters) [9754 9759]))                          )
                        (reparse-symbol indented_block_body) [9737 9797]))                  
                :type "class")
                nil [8661 9797])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9866 9889]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9842 9846])
                            ("mapping" variable nil (reparse-symbol function_parameters) [9848 9855]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9829 9890])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9907 9911]))                          )
                        (reparse-symbol indented_block_body) [9895 9948])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9966 9970]))                          )
                        (reparse-symbol indented_block_body) [9953 10042]))                  
                :type "class")
                nil [9798 10042])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10119 10123])
                            ("it" variable nil (reparse-symbol function_parameters) [10125 10127]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10083 10153])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10175 10179])
                            ("key" variable nil (reparse-symbol function_parameters) [10181 10184]))                          )
                        (reparse-symbol indented_block_body) [10158 10223])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10241 10245]))                          )
                        (reparse-symbol indented_block_body) [10228 10304]))                  
                :type "class")
                nil [10044 10304])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10382 10386])
                            ("it" variable nil (reparse-symbol function_parameters) [10388 10390]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10346 10416])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10438 10442])
                            ("item" variable nil (reparse-symbol function_parameters) [10444 10448]))                          )
                        (reparse-symbol indented_block_body) [10421 10619])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10637 10641]))                          )
                        (reparse-symbol indented_block_body) [10624 10722]))                  
                :type "class")
                nil [10306 10722])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10777 10781])
                            ("value" variable nil (reparse-symbol function_parameters) [10783 10788]))                          )
                        (reparse-symbol indented_block_body) [10760 10918])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10936 10940]))                          )
                        (reparse-symbol indented_block_body) [10923 11014]))                  
                :type "class")
                nil [10724 11014])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11088 11092])
                            ("key" variable nil (reparse-symbol function_parameters) [11094 11097])
                            ("value" variable nil (reparse-symbol function_parameters) [11099 11104]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11052 11130])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11171 11175])
                            ("key" variable nil (reparse-symbol function_parameters) [11177 11180]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11135 11206])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [11211 11230])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11244 11248])
                            ("key" variable nil (reparse-symbol function_parameters) [11250 11253])
                            ("default" variable nil (reparse-symbol function_parameters) [11255 11262]))                          )
                        (reparse-symbol indented_block_body) [11236 11497])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11514 11518]))                          )
                        (reparse-symbol indented_block_body) [11502 11700])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11715 11719]))                          )
                        (reparse-symbol indented_block_body) [11705 11832])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [11848 11853])
                        ("kwds" variable nil (reparse-symbol function_parameters) [11855 11861]))                      ) (reparse-symbol indented_block_body) [11837 12576])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12596 12600])
                            ("key" variable nil (reparse-symbol function_parameters) [12602 12605])
                            ("default" variable nil (reparse-symbol function_parameters) [12607 12614]))                          )
                        (reparse-symbol indented_block_body) [12581 12744]))                  
                :type "class")
                nil [11016 12744])
            ("MutableMapping" code nil nil [12745 12774])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13031 13035])
                            ("index" variable nil (reparse-symbol function_parameters) [13037 13042]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12995 13070])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13088 13092]))                          )
                        (reparse-symbol indented_block_body) [13075 13267])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13289 13293])
                            ("value" variable nil (reparse-symbol function_parameters) [13295 13300]))                          )
                        (reparse-symbol indented_block_body) [13272 13402])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13424 13428]))                          )
                        (reparse-symbol indented_block_body) [13407 13502])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13517 13521])
                            ("value" variable nil (reparse-symbol function_parameters) [13523 13528]))                          )
                        (reparse-symbol indented_block_body) [13507 13645])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13660 13664])
                            ("value" variable nil (reparse-symbol function_parameters) [13666 13671]))                          )
                        (reparse-symbol indented_block_body) [13650 13724]))                  
                :type "class")
                nil [12797 13724])
            ("Sequence" code nil nil [13725 13749])
            ("Sequence" code nil nil [13750 13779])
            ("Sequence" code nil nil [13780 13805])
            ("Sequence" code nil nil [13806 13831])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13908 13912])
                            ("index" variable nil (reparse-symbol function_parameters) [13914 13919])
                            ("value" variable nil (reparse-symbol function_parameters) [13921 13926]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13872 13954])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13995 13999])
                            ("index" variable nil (reparse-symbol function_parameters) [14001 14006]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13959 14034])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14070 14074])
                            ("index" variable nil (reparse-symbol function_parameters) [14076 14081])
                            ("value" variable nil (reparse-symbol function_parameters) [14083 14088]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14039 14116])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14132 14136])
                            ("value" variable nil (reparse-symbol function_parameters) [14138 14143]))                          )
                        (reparse-symbol indented_block_body) [14121 14184])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14201 14205]))                          )
                        (reparse-symbol indented_block_body) [14189 14316])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14332 14336])
                            ("values" variable nil (reparse-symbol function_parameters) [14338 14344]))                          )
                        (reparse-symbol indented_block_body) [14321 14399])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14412 14416])
                            ("index" variable nil (reparse-symbol function_parameters) [14418 14423]))                          )
                        (reparse-symbol indented_block_body) [14404 14494])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14510 14514])
                            ("value" variable nil (reparse-symbol function_parameters) [14516 14521]))                          )
                        (reparse-symbol indented_block_body) [14499 14560])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14578 14582])
                            ("values" variable nil (reparse-symbol function_parameters) [14584 14590]))                          )
                        (reparse-symbol indented_block_body) [14565 14641]))                  
                :type "class")
                nil [13834 14641])
            ("MutableSequence" code nil nil [14642 14672]))          
    :file "_abcoll.py"
    :pointmax 14673
    :fsize 14672
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax '((NAME 12157 . 12162) (IF 12173 . 12175) (ELSE 12191 . 12195))
    )
   (semanticdb-table "functools.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
    :file "functools.py"
    :pointmax 4479
    :fsize 4478
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "stat.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
    :file "stat.py"
    :pointmax 1843
    :fsize 1842
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "genericpath.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 296])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [405 409]))                  )
                nil [394 580])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [719 723]))                  )
                nil [708 888])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1050 1051]))                  )
                nil [1040 1236])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1250 1258]))                  )
                nil [1238 1358])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1373 1381]))                  )
                nil [1360 1500])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1515 1523]))                  )
                nil [1502 1636])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1651 1659]))                  )
                nil [1638 1776])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1845 1846]))              ) nil [1828 2077])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2377 2378])
                    ("sep" variable nil (reparse-symbol function_parameters) [2380 2383])
                    ("altsep" variable nil (reparse-symbol function_parameters) [2385 2391])
                    ("extsep" variable nil (reparse-symbol function_parameters) [2393 2399]))                  )
                nil [2363 3016]))          
    :file "genericpath.py"
    :pointmax 3016
    :fsize 3015
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "fnmatch.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1856])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1873 1877])
                    ("pat" variable nil (reparse-symbol function_parameters) [1879 1882]))                  )
                nil [1857 2244])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2259 2262]))                  )
                nil [2245 3240]))          
    :file "fnmatch.py"
    :pointmax 3240
    :fsize 3239
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "re.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9341])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9354 9361]))              ) nil [9343 12960]))          
    :file "re.py"
    :pointmax 12960
    :fsize 12959
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "abc.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
    :file "abc.py"
    :pointmax 7146
    :fsize 7145
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "keyword.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    python Lib/keyword.py
\"\"\"" code nil nil [24 279])
            ("__all__" variable nil nil [281 314])
            ("kwlist" variable nil nil [316 879])
            ("iskeyword" variable nil nil [881 923])
            ("main" function nil nil [925 1955])
            ("if" code nil nil [1956 1994]))          
    :file "keyword.py"
    :pointmax 1994
    :fsize 1993
    :lastmodtime '(21263 41017 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "heapq.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6118])
            ("__all__" variable nil nil [6120 6239])
            ("itertools" include nil nil [6241 6308])
            ("operator" include nil nil [6309 6340])
            ("bisect" include nil nil [6341 6354])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6367 6368])
                ("y" variable nil (reparse-symbol function_parameters) [6370 6371]))              ) nil [6356 6533])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6547 6551])
                    ("item" variable nil (reparse-symbol function_parameters) [6553 6557]))                  )
                nil [6534 6681])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6694 6698]))                  )
                nil [6682 7010])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7027 7031])
                    ("item" variable nil (reparse-symbol function_parameters) [7033 7037]))                  )
                nil [7011 7624])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7641 7645])
                    ("item" variable nil (reparse-symbol function_parameters) [7647 7651]))                  )
                nil [7625 7832])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7845 7846]))                  )
                nil [7833 8361])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8375 8376])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8378 8386]))                  )
                nil [8362 8786])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8801 8802])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8804 8812]))                  )
                nil [8787 9992])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [10176 10180])
                ("startpos" variable nil (reparse-symbol function_parameters) [10182 10190])
                ("pos" variable nil (reparse-symbol function_parameters) [10192 10195]))              ) nil [10162 11026])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12642 12646])
                ("pos" variable nil (reparse-symbol function_parameters) [12648 12651]))              ) nil [12630 13370])
            ("try" code nil nil [13408 13467])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [13478 13488]))              ) nil [13468 14663])
            ("_nsmallest" variable nil nil [14742 14764])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [14779 14780])
                    ("iterable" variable nil (reparse-symbol function_parameters) [14782 14790])
                    ("key" variable nil (reparse-symbol function_parameters) [14792 14795]))                  )
                nil [14765 15916])
            ("_nlargest" variable nil nil [15917 15937])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15951 15952])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15954 15962])
                    ("key" variable nil (reparse-symbol function_parameters) [15964 15967]))                  )
                nil [15938 17114])
            ("if" code nil nil [17115 17396]))          
    :file "heapq.py"
    :pointmax 17396
    :fsize 17395
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax '((RETURN 6476 . 6482) (IF 6491 . 6493) (ELSE 6515 . 6519))
    )
   (semanticdb-table "sre_compile.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 280])
            ("sys" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10012 10019])
                ("fixup" variable nil (reparse-symbol function_parameters) [10021 10026]))              ) nil [9990 11581])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11594 11596]))              ) nil [11582 11802])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11821 11825])
                ("pattern" variable nil (reparse-symbol function_parameters) [11827 11834])
                ("flags" variable nil (reparse-symbol function_parameters) [11836 11841]))              ) nil [11803 15201])
            ("try" code nil nil [15202 15323])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15337 15340]))              ) nil [15324 15437])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15448 15449])
                ("flags" variable nil (reparse-symbol function_parameters) [15451 15456]))              ) nil [15438 15683])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15696 15697])
                ("flags" variable nil (reparse-symbol function_parameters) [15699 15704]))              ) nil [15684 16428]))          
    :file "sre_compile.py"
    :pointmax 16428
    :fsize 16427
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_parse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5340]))                  
                :type "class")
                nil [2365 5340])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5398 5418])
                            ("self" variable nil (reparse-symbol indented_block_body) [5427 5441])
                            ("self" code nil (reparse-symbol indented_block_body) [5450 5463]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("string" variable nil (reparse-symbol function_parameters) [5381 5387]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5362 5464])
                    ("raise" code nil (reparse-symbol indented_block_body) [7715 7761]))                  
                :type "class")
                nil [5341 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 26393])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [26414 26422])
                ("match" variable nil (reparse-symbol function_parameters) [26424 26429]))              ) nil [26394 26799]))          
    :file "sre_parse.py"
    :pointmax 26799
    :fsize 26798
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax '((ASSIGN 26106 . 26107) (INDENT_BLOCK 7698 . 7711) (NEWLINE 7697 . 7698) (COLON 7696 . 7697))
    )
   (semanticdb-table "_weakrefset.py"
    :major-mode 'python-mode
    :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1830])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1847 1851]))                          )
                        (reparse-symbol indented_block_body) [1835 1909])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1931 1935])
                            ("item" variable nil (reparse-symbol function_parameters) [1937 1941]))                          )
                        (reparse-symbol indented_block_body) [1914 2066])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2086 2090]))                          )
                        (reparse-symbol indented_block_body) [2071 2189])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2194 2209])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2223 2227])
                            ("item" variable nil (reparse-symbol function_parameters) [2229 2233]))                          )
                        (reparse-symbol indented_block_body) [2215 2354])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2359 2473])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2487 2491]))                          )
                        (reparse-symbol indented_block_body) [2478 2530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2543 2547]))                          )
                        (reparse-symbol indented_block_body) [2535 2876])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2892 2896])
                            ("item" variable nil (reparse-symbol function_parameters) [2898 2902]))                          )
                        (reparse-symbol indented_block_body) [2881 3012])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3029 3033])
                            ("item" variable nil (reparse-symbol function_parameters) [3035 3039]))                          )
                        (reparse-symbol indented_block_body) [3017 3150])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3166 3170])
                            ("other" variable nil (reparse-symbol function_parameters) [3172 3177]))                          )
                        (reparse-symbol indented_block_body) [3155 3420])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3437 3441])
                            ("other" variable nil (reparse-symbol function_parameters) [3443 3448]))                          )
                        (reparse-symbol indented_block_body) [3425 3498])
                    ("_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3568 3572])
                            ("other" variable nil (reparse-symbol function_parameters) [3574 3579])
                            ("method" variable nil (reparse-symbol function_parameters) [3581 3587]))                          )
                        (reparse-symbol indented_block_body) [3557 3805])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3825 3829])
                            ("other" variable nil (reparse-symbol function_parameters) [3831 3836]))                          )
                        (reparse-symbol indented_block_body) [3810 3895])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3899 3919])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951])
                            ("other" variable nil (reparse-symbol function_parameters) [3953 3958]))                          )
                        (reparse-symbol indented_block_body) [3925 4171])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4188 4192])
                            ("other" variable nil (reparse-symbol function_parameters) [4194 4199]))                          )
                        (reparse-symbol indented_block_body) [4175 4432])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4454 4458])
                            ("other" variable nil (reparse-symbol function_parameters) [4460 4465]))                          )
                        (reparse-symbol indented_block_body) [4437 4526])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4530 4552])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4582 4586])
                            ("other" variable nil (reparse-symbol function_parameters) [4588 4593]))                          )
                        (reparse-symbol indented_block_body) [4558 4734])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4751 4755])
                            ("other" variable nil (reparse-symbol function_parameters) [4757 4762]))                          )
                        (reparse-symbol indented_block_body) [4738 4923])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4941 4945])
                            ("other" variable nil (reparse-symbol function_parameters) [4947 4952]))                          )
                        (reparse-symbol indented_block_body) [4928 5018])
                    ("__lt__" variable nil (reparse-symbol indented_block_body) [5022 5039])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("other" variable nil (reparse-symbol function_parameters) [5062 5067]))                          )
                        (reparse-symbol indented_block_body) [5045 5131])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5151 5155])
                            ("other" variable nil (reparse-symbol function_parameters) [5157 5162]))                          )
                        (reparse-symbol indented_block_body) [5136 5230])
                    ("__gt__" variable nil (reparse-symbol indented_block_body) [5234 5253])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274])
                            ("other" variable nil (reparse-symbol function_parameters) [5276 5281]))                          )
                        (reparse-symbol indented_block_body) [5259 5345])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5361 5365])
                            ("other" variable nil (reparse-symbol function_parameters) [5367 5372]))                          )
                        (reparse-symbol indented_block_body) [5350 5520])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5550 5554])
                            ("other" variable nil (reparse-symbol function_parameters) [5556 5561]))                          )
                        (reparse-symbol indented_block_body) [5525 5630])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5634 5664])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5702 5706])
                            ("other" variable nil (reparse-symbol function_parameters) [5708 5713]))                          )
                        (reparse-symbol indented_block_body) [5670 5936])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5953 5957])
                            ("other" variable nil (reparse-symbol function_parameters) [5959 5964]))                          )
                        (reparse-symbol indented_block_body) [5940 6207])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6222 6226])
                            ("other" variable nil (reparse-symbol function_parameters) [6228 6233]))                          )
                        (reparse-symbol indented_block_body) [6212 6287])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [6291 6305])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6326 6330])
                            ("other" variable nil (reparse-symbol function_parameters) [6332 6337]))                          )
                        (reparse-symbol indented_block_body) [6311 6390]))                  
                :type "class")
                nil [933 6390]))          
    :file "_weakrefset.py"
    :pointmax 6390
    :fsize 6389
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "bisect.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
    :file "bisect.py"
    :pointmax 2596
    :fsize 2595
    :lastmodtime '(21263 40993 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_constants.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("MAXREPEAT" variable nil nil [432 449])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [557 561]))                  
                :type "class")
                nil [529 562])
            ("FAILURE" variable nil nil [576 595])
            ("SUCCESS" variable nil nil [596 615])
            ("ANY" variable nil nil [617 628])
            ("ANY_ALL" variable nil nil [629 648])
            ("ASSERT" variable nil nil [649 666])
            ("ASSERT_NOT" variable nil nil [667 692])
            ("AT" variable nil nil [693 702])
            ("BIGCHARSET" variable nil nil [703 728])
            ("BRANCH" variable nil nil [729 746])
            ("CALL" variable nil nil [747 760])
            ("CATEGORY" variable nil nil [761 782])
            ("CHARSET" variable nil nil [783 802])
            ("GROUPREF" variable nil nil [803 824])
            ("GROUPREF_IGNORE" variable nil nil [825 860])
            ("GROUPREF_EXISTS" variable nil nil [861 896])
            ("IN" variable nil nil [897 906])
            ("IN_IGNORE" variable nil nil [907 930])
            ("INFO" variable nil nil [931 944])
            ("JUMP" variable nil nil [945 958])
            ("LITERAL" variable nil nil [959 978])
            ("LITERAL_IGNORE" variable nil nil [979 1012])
            ("MARK" variable nil nil [1013 1026])
            ("MAX_REPEAT" variable nil nil [1027 1052])
            ("MAX_UNTIL" variable nil nil [1053 1076])
            ("MIN_REPEAT" variable nil nil [1077 1102])
            ("MIN_UNTIL" variable nil nil [1103 1126])
            ("NEGATE" variable nil nil [1127 1144])
            ("NOT_LITERAL" variable nil nil [1145 1172])
            ("NOT_LITERAL_IGNORE" variable nil nil [1173 1214])
            ("RANGE" variable nil nil [1215 1230])
            ("REPEAT" variable nil nil [1231 1248])
            ("REPEAT_ONE" variable nil nil [1249 1274])
            ("SUBPATTERN" variable nil nil [1275 1300])
            ("MIN_REPEAT_ONE" variable nil nil [1301 1334])
            ("AT_BEGINNING" variable nil nil [1348 1377])
            ("AT_BEGINNING_LINE" variable nil nil [1378 1417])
            ("AT_BEGINNING_STRING" variable nil nil [1418 1461])
            ("AT_BOUNDARY" variable nil nil [1462 1489])
            ("AT_NON_BOUNDARY" variable nil nil [1490 1525])
            ("AT_END" variable nil nil [1526 1543])
            ("AT_END_LINE" variable nil nil [1544 1571])
            ("AT_END_STRING" variable nil nil [1572 1603])
            ("AT_LOC_BOUNDARY" variable nil nil [1604 1639])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1640 1683])
            ("AT_UNI_BOUNDARY" variable nil nil [1684 1719])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1720 1763])
            ("CATEGORY_DIGIT" variable nil nil [1778 1811])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1812 1853])
            ("CATEGORY_SPACE" variable nil nil [1854 1887])
            ("CATEGORY_NOT_SPACE" variable nil nil [1888 1929])
            ("CATEGORY_WORD" variable nil nil [1930 1961])
            ("CATEGORY_NOT_WORD" variable nil nil [1962 2001])
            ("CATEGORY_LINEBREAK" variable nil nil [2002 2043])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2044 2093])
            ("CATEGORY_LOC_WORD" variable nil nil [2094 2133])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2134 2181])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2182 2223])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2224 2273])
            ("CATEGORY_UNI_SPACE" variable nil nil [2274 2315])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2316 2365])
            ("CATEGORY_UNI_WORD" variable nil nil [2366 2405])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2406 2453])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2454 2503])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2504 2561])
            ("OPCODES" variable nil nil [2563 3060])
            ("ATCODES" variable nil nil [3062 3286])
            ("CHCODES" variable nil nil [3288 3702])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3717 3721]))              ) nil [3704 3818])
            ("OPCODES" variable nil nil [3819 3846])
            ("ATCODES" variable nil nil [3847 3874])
            ("CHCODES" variable nil nil [3875 3902])
            ("OP_IGNORE" variable nil nil [3952 4082])
            ("AT_MULTILINE" variable nil nil [4084 4163])
            ("AT_LOCALE" variable nil nil [4165 4255])
            ("AT_UNICODE" variable nil nil [4257 4348])
            ("CH_LOCALE" variable nil nil [4350 4704])
            ("CH_UNICODE" variable nil nil [4706 5085])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5095 5116])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5156 5179])
            ("SRE_FLAG_LOCALE" variable nil nil [5199 5218])
            ("SRE_FLAG_MULTILINE" variable nil nil [5242 5264])
            ("SRE_FLAG_DOTALL" variable nil nil [5300 5320])
            ("SRE_FLAG_UNICODE" variable nil nil [5355 5376])
            ("SRE_FLAG_VERBOSE" variable nil nil [5398 5419])
            ("SRE_FLAG_DEBUG" variable nil nil [5453 5473])
            ("SRE_INFO_PREFIX" variable nil nil [5514 5533])
            ("SRE_INFO_LITERAL" variable nil nil [5547 5567])
            ("SRE_INFO_CHARSET" variable nil nil [5614 5634])
            ("if" code nil nil [5683 7138]))          
    :file "sre_constants.py"
    :pointmax 7138
    :fsize 7137
    :lastmodtime '(21263 40994 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )

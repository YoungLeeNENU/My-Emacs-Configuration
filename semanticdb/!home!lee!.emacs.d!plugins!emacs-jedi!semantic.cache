;; Object emacs-jedi/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-jedi/"
  :tables (list 
   (semanticdb-table "setup.py"
    :major-mode 'python-mode
    :tags 
        '( ("distutils.core" include nil nil [29 61])
            ("setup" code nil nil [62 89]))          
    :file "setup.py"
    :pointmax 90
    :fsize 89
    :lastmodtime '(20974 36033 356029 16000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("ENV" variable (:default-value ("env")) nil [1 11])
            ("VIRTUALENV" variable (:default-value ("VIRTUALENV_SYSTEM_SITE_PACKAGES=$(VIRTUALENV_SYSTEM_SITE_PACKAGES)" "virtualenv" "--python=$(PYTHON)")) nil [52 169])
            ("PIP_INSTALL" variable (:default-value ("$(ENV)/$(BINDIR)/pip" "install" "--use-mirrors")) nil [169 226])
            ("JEDI_DEV_URL" variable (:default-value ("https://github.com/davidhalter/jedi/archive/dev.zip")) nil [226 293])
            ("VIRTUAL_EMACS" variable (:default-value ("${CARTON}" "exec" "${EMACS}")) nil [366 406])
            (".PHONY" function (:arguments ("test" "test-1" "tryout" "clean-elpa" "requirements" "env" "clean-env" "clean" "print-deps" "travis-ci" "doc")) nil [407 507])
            ("test" function (:arguments ("elpa" "requirements")) nil [508 548])
            ("test-1" function nil nil [549 706])
            ("compile" function (:arguments ("elpa" "clean-elc")) nil [707 795])
            ("clean-elc" function nil nil [796 821])
            ("tryout" function (:arguments ("compile" "requirements")) nil [822 895])
            ("doc" function (:arguments ("elpa")) nil [896 924])
            ("ensure-git" function nil nil [925 1006])
            ("elpa" function (:arguments ("Carton")) nil [1007 1084])
            ("clean-elpa" function nil nil [1085 1110])
            ("requirements" function (:arguments ("env")) nil [1111 1176])
            ("install-jedi-dev" function nil nil [1177 1237])
            ("env" function (:arguments ("$(ENV)/$(BINDIR)/activate")) nil [1238 1269])
            ("$(ENV)" function nil nil [1269 1318])
            ("clean-env" function nil nil [1319 1345])
            ("clean-el" function (:arguments ("clean-elpa" "clean-elc")) nil [1346 1377])
            ("clean" function (:arguments ("clean-env" "clean-el")) nil [1377 1403])
            ("print-deps" function (:arguments ("elpa" "requirements")) nil [1404 1708])
            ("before-test" function (:arguments ("requirements")) nil [1709 1749])
            ("travis-ci" function (:arguments ("print-deps" "test")) nil [1750 1777])
            ("JOBS" variable (:default-value ("$(addprefix job-,${EMACS_LIST})")) nil [2126 2166])
            (".PHONY" function (:arguments ("${JOBS}")) nil [2166 2182])
            ("${JOBS}" function (:arguments ("job-%:")) nil [2183 2273])
            ("test-all" function (:arguments ("requirements" "${JOBS}")) nil [2274 2305])
            ("PACKAGE" variable (:default-value ("jedi")) nil [2438 2453])
            ("VERSION" variable (:default-value ("$(shell grep ';; Version:' jedi.el | sed 's/^.* \\([0-9].*\\)$$/\\1/')")) nil [2453 2531])
            ("DIST_FILES" variable (:default-value ("jedi-pkg.el" "jedi.el" "jediepcserver.py" "requirements.txt" "Makefile" "tryout-jedi.el")) nil [2531 2625])
            (".PHONY" function (:arguments ("dist" "${PACKAGE}-${VERSION}.tar.gz" "${PACKAGE}-${VERSION}" "clean-dist" "clean-dist-all")) nil [2626 2719])
            ("dist" function (:arguments ("clean-dist")) nil [2720 2753])
            ("dist-1" function (:arguments ("dist/${PACKAGE}-${VERSION}.tar" "dist/${PACKAGE}-${VERSION}.tar.gz")) nil [2754 2827])
            ("dist/" function (:arguments ("${PACKAGE}-${VERSION}.tar")) nil [2828 2886])
            ("${PACKAGE}" function (:arguments ("${PACKAGE}-${VERSION}")) nil [2886 2973])
            ("dist/" function (:arguments ("${PACKAGE}-${VERSION}.tar.gz")) nil [2974 3038])
            ("${PACKAGE}" function (:arguments ("${PACKAGE}-${VERSION}")) nil [3038 3129])
            ("${PACKAGE}" function (:arguments ("dist/${PACKAGE}-${VERSION}")) nil [3130 3180])
            ("dist/" function nil nil [3180 3245])
            ("clean-dist" function nil nil [3246 3294])
            ("clean-dist-all" function nil nil [3295 3324])
            ("PACKAGE_USER_DIR" variable nil nil [3353 3372])
            ("TEST_PACKAGE_DIR" variable (:default-value ("dist/test")) nil [3372 3401])
            ("install-dist" function nil nil [3402 3796])
            ("test-install" function (:arguments ("dist/${PACKAGE}-${VERSION}.tar")) nil [3797 3959])
            ("test-install-requirement" function (:arguments ("test-install")) nil [3960 4079])
            ("MAKE_GH_PAGES" variable (:default-value ("$(MAKE)" "--directory" "doc" "--file" "gh-pages.mk")) nil [4096 4155])
            ("gh-pages-latest" function nil nil [4156 4191])
            ("gh-pages-released" function nil nil [4307 4450]))          
    :file "Makefile"
    :pointmax 4450
    :fsize 4449
    :lastmodtime '(20974 36033 356029 16000)
    :unmatched-syntax '((shell-command 4416 . 4449) (bol 4415 . 4415) (bol 4081 . 4081) (bol 3326 . 3326) (bol 2307 . 2307) (bol 1779 . 1779) (symbol 361 . 364) (punctuation 359 . 360) (punctuation 358 . 359) (symbol 351 . 357) (bol 351 . 351) (symbol 344 . 349) (punctuation 342 . 343) (punctuation 341 . 342) (symbol 335 . 340) (symbol 328 . 334) (bol 328 . 328) (symbol 321 . 327) (punctuation 319 . 320) (punctuation 318 . 319) (symbol 311 . 317) (bol 311 . 311) (symbol 304 . 310) (punctuation 302 . 303) (punctuation 301 . 302) (symbol 294 . 300) (bol 294 . 294) (symbol 47 . 51) (punctuation 45 . 46) (punctuation 44 . 45) (symbol 12 . 43) (bol 12 . 12))
    )
   (semanticdb-table "jediepcserver.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Jedi EPC server.

Copyright (C) 2012 Takafumi Arakaki

Author: Takafumi Arakaki <aka.tkf at gmail.com>

This file is NOT part of GNU Emacs.

Jedi EPC server is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

Jedi EPC server is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Jedi EPC server.
If not, see <http://www.gnu.org/licenses/>.

\"\"\"" code nil nil [1 770])
            ("os" include nil nil [772 781])
            ("sys" include nil nil [782 792])
            ("re" include nil nil [793 802])
            ("itertools" include nil nil [803 819])
            ("logging" include nil nil [820 834])
            ("site" include nil nil [835 846])
            ("jedi" variable nil nil [848 859])
            ("PY3" variable nil nil [886 918])
            ("NEED_ENCODE" code nil nil [919 940])
            ("jedi_script" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [959 965])
                ("line" variable nil (reparse-symbol function_parameters) [967 971])
                ("column" variable nil (reparse-symbol function_parameters) [973 979])
                ("source_path" variable nil (reparse-symbol function_parameters) [981 992]))              ) nil [943 1185])
            ("candidate_symbol" function
               (:documentation "
    Return a character representing completion type.

    :type comp: jedi.api.Completion
    :arg  comp: A completion object returned by `jedi.Script.complete`.

    "
                :arguments 
                  ( ("comp" variable nil (reparse-symbol function_parameters) [1208 1212]))                  )
                nil [1187 1498])
            ("candidates_description" function
               (:documentation "
    Return `comp.description` in an appropriate format.

    * Avoid return a string 'None'.
    * Strip off all newlines. This is required for using
      `comp.description` as candidate summary.

    "
                :arguments 
                  ( ("comp" variable nil (reparse-symbol function_parameters) [1527 1531]))                  )
                nil [1500 1853])
            ("_WHITESPACES_RE" variable nil nil [1853 1889])
            ("complete" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1905 1910]))              ) nil [1892 2181])
            ("get_in_function_call" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [2208 2213]))              ) nil [2183 2634])
            ("_goto" function
               (:documentation "
    Helper function for `goto` and `related_names`.

    :arg  method: `jedi.Script.goto` or `jedi.Script.related_names`
    :arg    args: Arguments to `jedi_script`

    "
                :arguments 
                  ( ("method" variable nil (reparse-symbol function_parameters) [2646 2652])
                    ("args" variable nil (reparse-symbol function_parameters) [2654 2659]))                  )
                nil [2636 3321])
            ("goto" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3332 3337]))              ) nil [3323 3382])
            ("related_names" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3402 3407]))              ) nil [3384 3461])
            ("definition_to_dict" function (:arguments 
              ( ("d" variable nil (reparse-symbol function_parameters) [3486 3487]))              ) nil [3463 3820])
            ("get_definition" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3841 3846]))              ) nil [3822 3957])
            ("get_names_recursively" function
               (:documentation "
    Fetch interesting defined names in sub-scopes under `definition`.

    :type names: jedi.api_classes.Definition

    "
                :arguments 
                  ( ("definition" variable nil (reparse-symbol function_parameters) [3985 3995])
                    ("parent" variable nil (reparse-symbol function_parameters) [3997 4003]))                  )
                nil [3959 4500])
            ("defined_names" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4520 4525]))              ) nil [4502 4603])
            ("get_module_version" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [4628 4634]))              ) nil [4605 5064])
            ("get_jedi_version" function nil nil [5066 5317])
            ("jedi_epc_server" function (:arguments 
              ( ("address" variable nil (reparse-symbol function_parameters) [5339 5346])
                ("port" variable nil (reparse-symbol function_parameters) [5360 5364])
                ("port_file" variable nil (reparse-symbol function_parameters) [5368 5377])
                ("sys_path" variable nil (reparse-symbol function_parameters) [5410 5418])
                ("virtual_env" variable nil (reparse-symbol function_parameters) [5423 5434])
                ("debugger" variable nil (reparse-symbol function_parameters) [5459 5467])
                ("log" variable nil (reparse-symbol function_parameters) [5474 5477])
                ("log_level" variable nil (reparse-symbol function_parameters) [5484 5493])
                ("log_traceback" variable nil (reparse-symbol function_parameters) [5520 5533]))              ) nil [5319 7504])
            ("import_jedi" function nil nil [7506 7642])
            ("add_virtualenv_path" function
               (:documentation "Add virtualenv's site-packages to `sys.path`."
                :arguments 
                  ( ("venv" variable nil (reparse-symbol function_parameters) [7668 7672]))                  )
                nil [7644 7977])
            ("main" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [7988 7992]))              ) nil [7979 9447])
            ("if" code nil nil [9449 9487]))          
    :file "jediepcserver.py"
    :pointmax 9487
    :fsize 9486
    :lastmodtime '(20974 36033 356029 16000)
    :unmatched-syntax '((RETURN 1780 . 1786) (IF 1818 . 1820) (ELSE 1845 . 1849))
    )
   )
  :file "!home!lee!.emacs.d!plugins!emacs-jedi!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )

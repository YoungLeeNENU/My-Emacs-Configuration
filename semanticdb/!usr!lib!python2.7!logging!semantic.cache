;; Object logging/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "logging/"
  :tables (list 
   (semanticdb-table "__init__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Logging package for Python. Based on PEP 282 and comments thereto in
comp.lang.python, and influenced by Apache's log4j system.

Copyright (C) 2001-2010 Vinay Sajip. All Rights Reserved.

To use, simply 'import logging' and log away!
\"\"\"" code nil nil [988 1229])
            ("sys" include nil nil [1231 1292])
            ("os" include nil nil [1231 1292])
            ("time" include nil nil [1231 1292])
            ("cStringIO" include nil nil [1231 1292])
            ("traceback" include nil nil [1231 1292])
            ("warnings" include nil nil [1231 1292])
            ("weakref" include nil nil [1231 1292])
            ("__all__" variable nil nil [1294 1834])
            ("try" code nil nil [1836 1897])
            ("try" code nil nil [1898 1980])
            ("__author__" variable nil nil [1981 2035])
            ("__status__" variable nil nil [2036 2062])
            ("__version__" variable nil nil [2063 2086])
            ("__date__" variable nil nil [2087 2119])
            ("try" code nil nil [2305 2381])
            ("if" code nil nil [2484 2709])
            ("_srcfile" variable nil nil [2709 2746])
            ("currentframe" function (:documentation "Return the frame object for the caller's stack frame.") nil [2791 2969])
            ("if" code nil nil [2970 3040])
            ("_startTime" variable nil nil [3428 3452])
            ("raiseExceptions" variable nil nil [3542 3561])
            ("logThreads" variable nil nil [3638 3652])
            ("logMultiprocessing" variable nil nil [3735 3757])
            ("logProcesses" variable nil nil [3832 3848])
            ("CRITICAL" variable nil nil [4373 4386])
            ("FATAL" variable nil nil [4387 4403])
            ("ERROR" variable nil nil [4404 4414])
            ("WARNING" variable nil nil [4415 4427])
            ("WARN" variable nil nil [4428 4442])
            ("INFO" variable nil nil [4443 4452])
            ("DEBUG" variable nil nil [4453 4463])
            ("NOTSET" variable nil nil [4464 4474])
            ("_levelNames" variable nil nil [4476 4787])
            ("getLevelName" function
               (:documentation "
    Return the textual representation of logging level 'level'.

    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,
    INFO, DEBUG) then you get the corresponding string. If you have
    associated levels with names using addLevelName then the name you have
    associated with 'level' is returned.

    If a numeric value corresponding to one of the defined levels is passed
    in, the corresponding string representation is returned.

    Otherwise, the string \"Level %s\" % level is returned.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [4806 4811]))                  )
                nil [4789 5408])
            ("addLevelName" function
               (:documentation "
    Associate 'levelName' with 'level'.

    This is used when converting levels to text during message formatting.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [5426 5431])
                    ("levelName" variable nil (reparse-symbol function_parameters) [5433 5442]))                  )
                nil [5409 5777])
            ("_checkLevel" function (:arguments 
              ( ("level" variable nil (reparse-symbol function_parameters) [5794 5799]))              ) nil [5778 6111])
            ("if" code nil nil [6731 6795])
            ("_acquireLock" function (:documentation "
    Acquire the module-level lock for serializing access to shared data.

    This should be released with _releaseLock().
    ") nil [6796 6993])
            ("_releaseLock" function (:documentation "
    Release the module-level lock acquired by calling _acquireLock().
    ") nil [6994 7138])
            ("LogRecord" type
               (:documentation "
    A LogRecord instance represents an event being logged.

    LogRecord instances are created every time something is logged. They
    contain all the information pertinent to the event being logged. The
    main information passed in is in msg and args, which are combined
    using str(msg) % args to create the message field of the record. The
    record also includes information such as when the record was created,
    the source line where the logging call was made, and any exception
    information to be logged.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize a logging record with interesting information.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7994 8075])
                            ("ct" variable nil (reparse-symbol indented_block_body) [8084 8100])
                            ("self" variable nil (reparse-symbol indented_block_body) [8109 8125])
                            ("self" variable nil (reparse-symbol indented_block_body) [8134 8148])
                            ("if" code nil (reparse-symbol indented_block_body) [8902 8999])
                            ("self" variable nil (reparse-symbol indented_block_body) [9007 9023])
                            ("self" variable nil (reparse-symbol indented_block_body) [9032 9068])
                            ("self" variable nil (reparse-symbol indented_block_body) [9077 9097])
                            ("self" variable nil (reparse-symbol indented_block_body) [9106 9130])
                            ("try" code nil (reparse-symbol indented_block_body) [9139 9396])
                            ("self" variable nil (reparse-symbol indented_block_body) [9404 9428])
                            ("self" variable nil (reparse-symbol indented_block_body) [9437 9457])
                            ("self" variable nil (reparse-symbol indented_block_body) [9506 9526])
                            ("self" variable nil (reparse-symbol indented_block_body) [9535 9555])
                            ("self" variable nil (reparse-symbol indented_block_body) [9564 9581])
                            ("self" code nil (reparse-symbol indented_block_body) [9590 9625])
                            ("self" code nil (reparse-symbol indented_block_body) [9634 9691])
                            ("if" code nil (reparse-symbol indented_block_body) [9700 9913])
                            ("if" code nil (reparse-symbol indented_block_body) [9921 10539])
                            ("if" code nil (reparse-symbol indented_block_body) [10547 10675]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7899 7903])
                            ("name" variable nil (reparse-symbol function_parameters) [7905 7909])
                            ("level" variable nil (reparse-symbol function_parameters) [7911 7916])
                            ("pathname" variable nil (reparse-symbol function_parameters) [7918 7926])
                            ("lineno" variable nil (reparse-symbol function_parameters) [7928 7934])
                            ("msg" variable nil (reparse-symbol function_parameters) [7953 7956])
                            ("args" variable nil (reparse-symbol function_parameters) [7958 7962])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [7964 7972])
                            ("func" variable nil (reparse-symbol function_parameters) [7974 7978]))                          
                        :documentation "
        Initialize a logging record with interesting information.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7886 10675])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10692 10696]))                          )
                        (reparse-symbol indented_block_body) [10680 10826])
                    ("getMessage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10846 10850]))                          
                        :documentation "
        Return the message for this LogRecord.

        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        ")
                        (reparse-symbol indented_block_body) [10831 11451]))                  
                :type "class")
                nil [7317 11451])
            ("makeLogRecord" function
               (:documentation "
    Make a LogRecord whose attributes are defined by the specified dictionary,
    This function is useful for converting a logging event received over
    a socket connection (which is sent as a dictionary) into a LogRecord
    instance.
    "
                :arguments 
                  ( ("dict" variable nil (reparse-symbol function_parameters) [11470 11474]))                  )
                nil [11452 11833])
            ("Formatter" type
               (:documentation "
    Formatter instances are used to convert a LogRecord to text.

    Formatters need to know how a LogRecord is constructed. They are
    responsible for converting a LogRecord to (usually) a string which can
    be interpreted by either a human or an external system. The base Formatter
    allows a formatting string to be specified. If none is supplied, the
    default value of \"%s(message)\\\\n\" is used.

    The Formatter can be initialized with a format string which makes use of
    knowledge of the LogRecord attributes - e.g. the default value mentioned
    above makes use of the fact that the user's message and arguments are pre-
    formatted into a LogRecord's message attribute. Currently, the useful
    attributes in a LogRecord are described by:

    %(name)s            Name of the logger (logging channel)
    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,
                        WARNING, ERROR, CRITICAL)
    %(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",
                        \"WARNING\", \"ERROR\", \"CRITICAL\")
    %(pathname)s        Full pathname of the source file where the logging
                        call was issued (if available)
    %(filename)s        Filename portion of pathname
    %(module)s          Module (name portion of filename)
    %(lineno)d          Source line number where the logging call was issued
                        (if available)
    %(funcName)s        Function name
    %(created)f         Time when the LogRecord was created (time.time()
                        return value)
    %(asctime)s         Textual time when the LogRecord was created
    %(msecs)d           Millisecond portion of the creation time
    %(relativeCreated)d Time in milliseconds when the LogRecord was created,
                        relative to the time the logging module was loaded
                        (typically at application startup time)
    %(thread)d          Thread ID (if available)
    %(threadName)s      Thread name (if available)
    %(process)d         Process ID (if available)
    %(message)s         The result of record.getMessage(), computed just as
                        the record is emitted
    "
                :superclasses ("object")
                :members 
                  ( ("converter" variable nil (reparse-symbol indented_block_body) [14284 14310])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the formatter with specified format strings.

        Initialize the formatter either with the specified format string, or a
        default as described above. Allow for specialized date formatting with
        the optional datefmt argument (if omitted, you get the ISO8601 format).
        \"\"\"" code nil (reparse-symbol indented_block_body) [14368 14686])
                            ("if" code nil (reparse-symbol indented_block_body) [14695 14783])
                            ("self" variable nil (reparse-symbol indented_block_body) [14791 14813]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14329 14333])
                            ("fmt" variable nil (reparse-symbol function_parameters) [14335 14338])
                            ("datefmt" variable nil (reparse-symbol function_parameters) [14345 14352]))                          
                        :documentation "
        Initialize the formatter with specified format strings.

        Initialize the formatter either with the specified format string, or a
        default as described above. Allow for specialized date formatting with
        the optional datefmt argument (if omitted, you get the ISO8601 format).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14316 14814])
                    ("formatTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14834 14838])
                            ("record" variable nil (reparse-symbol function_parameters) [14840 14846])
                            ("datefmt" variable nil (reparse-symbol function_parameters) [14848 14855]))                          
                        :documentation "
        Return the creation time of the specified LogRecord as formatted text.

        This method should be called from format() by a formatter which
        wants to make use of a formatted time. This method can be overridden
        in formatters to provide for any specific requirement, but the
        basic behaviour is as follows: if datefmt (a string) is specified,
        it is used with time.strftime() to format the creation time of the
        record. Otherwise, the ISO8601 format is used. The resulting
        string is returned. This function uses a user-configurable function
        to convert the creation time to a tuple. By default, time.localtime()
        is used; to change this for a particular formatter instance, set the
        'converter' attribute to a function with the same signature as
        time.localtime() or time.gmtime(). To change it for all formatters,
        for example if you want all logging times to be shown in GMT,
        set the 'converter' attribute in the Formatter class.
        ")
                        (reparse-symbol indented_block_body) [14819 16155])
                    ("formatException" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16180 16184])
                            ("ei" variable nil (reparse-symbol function_parameters) [16186 16188]))                          
                        :documentation "
        Format and return the specified exception information as a string.

        This default implementation just uses
        traceback.print_exception()
        ")
                        (reparse-symbol indented_block_body) [16160 16588])
                    ("usesTime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16606 16610]))                          
                        :documentation "
        Check if the format uses the creation time of the record.
        ")
                        (reparse-symbol indented_block_body) [16593 16752])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16768 16772])
                            ("record" variable nil (reparse-symbol function_parameters) [16774 16780]))                          
                        :documentation "
        Format the specified record as text.

        The record's attribute dictionary is used as the operand to a
        string formatting operation which yields the returned string.
        Before formatting the dictionary, a couple of preparatory steps
        are carried out. The message attribute of the record is computed
        using LogRecord.getMessage(). If the formatting string uses the
        time (as determined by a call to usesTime(), formatTime() is
        called to format the event time. If there is exception information,
        it is formatted using formatException() and appended to the message.
        ")
                        (reparse-symbol indented_block_body) [16757 18559]))                  
                :type "class")
                nil [12025 18559])
            ("_defaultFormatter" variable nil nil [18624 18655])
            ("BufferingFormatter" type
               (:documentation "
    A formatter suitable for formatting a number of records.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Optionally specify a formatter which will be used to format each
        individual record.
        \"\"\"" code nil (reparse-symbol indented_block_body) [18814 18929])
                            ("if" code nil (reparse-symbol indented_block_body) [18938 19044]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18785 18789])
                            ("linefmt" variable nil (reparse-symbol function_parameters) [18791 18798]))                          
                        :documentation "
        Optionally specify a formatter which will be used to format each
        individual record.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18772 19044])
                    ("formatHeader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19066 19070])
                            ("records" variable nil (reparse-symbol function_parameters) [19072 19079]))                          
                        :documentation "
        Return the header string for the specified records.
        ")
                        (reparse-symbol indented_block_body) [19049 19184])
                    ("formatFooter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19206 19210])
                            ("records" variable nil (reparse-symbol function_parameters) [19212 19219]))                          
                        :documentation "
        Return the footer string for the specified records.
        ")
                        (reparse-symbol indented_block_body) [19189 19324])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19340 19344])
                            ("records" variable nil (reparse-symbol function_parameters) [19346 19353]))                          
                        :documentation "
        Format the specified records and return the result as a string.
        ")
                        (reparse-symbol indented_block_body) [19329 19702]))                  
                :type "class")
                nil [18657 19702])
            ("Filter" type
               (:documentation "
    Filter instances are used to perform arbitrary filtering of LogRecords.

    Loggers and Handlers can optionally use Filter instances to filter
    records as desired. The base filter class only allows events which are
    below a certain point in the logger hierarchy. For example, a filter
    initialized with \"A.B\" will allow events logged by loggers \"A.B\",
    \"A.B.C\", \"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc. If
    initialized with the empty string, all events are passed.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize a filter.

        Initialize with the name of the logger which, together with its
        children, will have its events allowed through the filter. If no
        name is specified, allow every event.
        \"\"\"" code nil (reparse-symbol indented_block_body) [20467 20703])
                            ("self" variable nil (reparse-symbol indented_block_body) [20712 20728])
                            ("self" variable nil (reparse-symbol indented_block_body) [20737 20758]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20443 20447])
                            ("name" variable nil (reparse-symbol function_parameters) [20449 20453]))                          
                        :documentation "
        Initialize a filter.

        Initialize with the name of the logger which, together with its
        children, will have its events allowed through the filter. If no
        name is specified, allow every event.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20430 20759])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20775 20779])
                            ("record" variable nil (reparse-symbol function_parameters) [20781 20787]))                          
                        :documentation "
        Determine if the specified record is to be logged.

        Is the specified record to be logged? Returns 0 for no, nonzero for
        yes. If deemed appropriate, the record may be modified in-place.
        ")
                        (reparse-symbol indented_block_body) [20764 21260]))                  
                :type "class")
                nil [19891 21260])
            ("Filterer" type
               (:documentation "
    A base class for loggers and handlers which allows them to share
    common code.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the list of filters to be an empty list.
        \"\"\"" code nil (reparse-symbol indented_block_body) [21419 21494])
                            ("self" variable nil (reparse-symbol indented_block_body) [21503 21520]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21404 21408]))                          
                        :documentation "
        Initialize the list of filters to be an empty list.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21391 21521])
                    ("addFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21540 21544])
                            ("filter" variable nil (reparse-symbol function_parameters) [21546 21552]))                          
                        :documentation "
        Add the specified filter to this handler.
        ")
                        (reparse-symbol indented_block_body) [21526 21710])
                    ("removeFilter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21732 21736])
                            ("filter" variable nil (reparse-symbol function_parameters) [21738 21744]))                          
                        :documentation "
        Remove the specified filter from this handler.
        ")
                        (reparse-symbol indented_block_body) [21715 21901])
                    ("filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21917 21921])
                            ("record" variable nil (reparse-symbol function_parameters) [21923 21929]))                          
                        :documentation "
        Determine if a record is loggable by consulting all the filters.

        The default is to allow the record to be logged; any filter can veto
        this and the record is then dropped. Returns a zero value if a record
        is to be dropped, else non-zero.
        ")
                        (reparse-symbol indented_block_body) [21906 22372]))                  
                :type "class")
                nil [21261 22372])
            ("_handlers" variable nil nil [22562 22603])
            ("_handlerList" variable nil nil [22639 22656])
            ("_removeHandlerRef" function
               (:documentation "
    Remove a handler reference from the internal cleanup list.
    "
                :arguments 
                  ( ("wr" variable nil (reparse-symbol function_parameters) [22752 22754]))                  )
                nil [22730 23189])
            ("_addHandlerRef" function
               (:documentation "
    Add a handler to the internal cleanup list using a weak reference.
    "
                :arguments 
                  ( ("handler" variable nil (reparse-symbol function_parameters) [23209 23216]))                  )
                nil [23190 23439])
            ("Handler" type
               (:documentation "
    Handler instances dispatch logging events to specific destinations.

    The base handler class. Acts as a placeholder which defines the Handler
    interface. Handlers can optionally use Formatter instances to format
    records as desired. By default, no formatter is specified; in this case,
    the 'raw' message as determined by record.message is logged.
    "
                :superclasses ("Filterer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initializes the instance - basically setting the formatter to None
        and the filter list to empty.
        \"\"\"" code nil (reparse-symbol indented_block_body) [23891 24019])
                            ("Filterer" code nil (reparse-symbol indented_block_body) [24028 24051])
                            ("self" variable nil (reparse-symbol indented_block_body) [24060 24077])
                            ("self" variable nil (reparse-symbol indented_block_body) [24086 24117])
                            ("self" variable nil (reparse-symbol indented_block_body) [24126 24147])
                            ("_addHandlerRef" code nil (reparse-symbol indented_block_body) [24235 24255])
                            ("self" code nil (reparse-symbol indented_block_body) [24264 24281]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23862 23866])
                            ("level" variable nil (reparse-symbol function_parameters) [23868 23873]))                          
                        :documentation "
        Initializes the instance - basically setting the formatter to None
        and the filter list to empty.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23849 24282])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24300 24304]))                          )
                        (reparse-symbol indented_block_body) [24287 24333])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24351 24355])
                            ("name" variable nil (reparse-symbol function_parameters) [24357 24361]))                          )
                        (reparse-symbol indented_block_body) [24338 24616])
                    ("name" variable nil (reparse-symbol indented_block_body) [24621 24656])
                    ("createLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24677 24681]))                          
                        :documentation "
        Acquire a thread lock for serializing access to the underlying I/O.
        ")
                        (reparse-symbol indented_block_body) [24662 24888])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24905 24909]))                          
                        :documentation "
        Acquire the I/O thread lock.
        ")
                        (reparse-symbol indented_block_body) [24893 25027])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25044 25048]))                          
                        :documentation "
        Release the I/O thread lock.
        ")
                        (reparse-symbol indented_block_body) [25032 25166])
                    ("setLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25184 25188])
                            ("level" variable nil (reparse-symbol function_parameters) [25190 25195]))                          
                        :documentation "
        Set the logging level of this handler.
        ")
                        (reparse-symbol indented_block_body) [25171 25309])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25325 25329])
                            ("record" variable nil (reparse-symbol function_parameters) [25331 25337]))                          
                        :documentation "
        Format the specified record.

        If a formatter is set, use it. Otherwise, use the default formatter
        for the module.
        ")
                        (reparse-symbol indented_block_body) [25314 25646])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25660 25664])
                            ("record" variable nil (reparse-symbol function_parameters) [25666 25672]))                          
                        :documentation "
        Do whatever it takes to actually log the specified logging record.

        This version is intended to be implemented by subclasses and so
        raises a NotImplementedError.
        ")
                        (reparse-symbol indented_block_body) [25651 26006])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26022 26026])
                            ("record" variable nil (reparse-symbol function_parameters) [26028 26034]))                          
                        :documentation "
        Conditionally emit the specified logging record.

        Emission depends on filters which may have been added to the handler.
        Wrap the actual emission of the record with acquisition/release of
        the I/O thread lock. Returns whether the filter passed the record for
        emission.
        ")
                        (reparse-symbol indented_block_body) [26011 26564])
                    ("setFormatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26586 26590])
                            ("fmt" variable nil (reparse-symbol function_parameters) [26592 26595]))                          
                        :documentation "
        Set the formatter for this handler.
        ")
                        (reparse-symbol indented_block_body) [26569 26695])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26710 26714]))                          
                        :documentation "
        Ensure all logging output has been flushed.

        This version does nothing and is intended to be implemented by
        subclasses.
        ")
                        (reparse-symbol indented_block_body) [26700 26898])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26913 26917]))                          
                        :documentation "
        Tidy up any resources used by the handler.

        This version removes the handler from an internal map of handlers,
        _handlers, which is used for handler lookup by name. Subclasses
        should ensure that this gets called from overridden close()
        methods.
        ")
                        (reparse-symbol indented_block_body) [26903 27536])
                    ("handleError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27557 27561])
                            ("record" variable nil (reparse-symbol function_parameters) [27563 27569]))                          
                        :documentation "
        Handle errors which occur during an emit() call.

        This method should be called from handlers when an exception is
        encountered during an emit() call. If raiseExceptions is false,
        exceptions get silently ignored. This is what is mostly wanted
        for a logging system - most users will not care about errors in
        the logging system, they are more interested in application errors.
        You could, however, replace this with a custom handler if you wish.
        The record which was being processed is passed in to this method.
        ")
                        (reparse-symbol indented_block_body) [27541 28650]))                  
                :type "class")
                nil [23440 28650])
            ("StreamHandler" type
               (:documentation "
    A handler class which writes logging records, appropriately formatted,
    to a stream. Note that this class does not close the stream, as
    sys.stdout or sys.stderr may be used.
    "
                :superclasses ("Handler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the handler.

        If stream is not specified, sys.stderr is used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [28928 29032])
                            ("Handler" code nil (reparse-symbol indented_block_body) [29041 29063])
                            ("if" code nil (reparse-symbol indented_block_body) [29072 29123])
                            ("self" variable nil (reparse-symbol indented_block_body) [29131 29151]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28900 28904])
                            ("stream" variable nil (reparse-symbol function_parameters) [28906 28912]))                          
                        :documentation "
        Initialize the handler.

        If stream is not specified, sys.stderr is used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28887 29152])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29167 29171]))                          
                        :documentation "
        Flushes the stream.
        ")
                        (reparse-symbol indented_block_body) [29157 29316])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29330 29334])
                            ("record" variable nil (reparse-symbol function_parameters) [29336 29342]))                          
                        :documentation "
        Emit a record.

        If a formatter is specified, it is used to format the record.
        The record is then written to the stream with a trailing newline.  If
        exception information is present, it is formatted using
        traceback.print_exception and appended to the stream.  If the stream
        has an 'encoding' attribute, it is used to determine how to do the
        output to the stream.
        ")
                        (reparse-symbol indented_block_body) [29321 31186]))                  
                :type "class")
                nil [28651 31186])
            ("FileHandler" type
               (:documentation "
    A handler class which writes formatted logging records to disk files.
    "
                :superclasses ("StreamHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Open the specified file and use it as the stream for logging.
        \"\"\"" code nil (reparse-symbol indented_block_body) [31387 31472])
                            ("if" code nil (reparse-symbol indented_block_body) [31618 31665])
                            ("self" variable nil (reparse-symbol indented_block_body) [31673 31718])
                            ("self" variable nil (reparse-symbol indented_block_body) [31727 31743])
                            ("self" variable nil (reparse-symbol indented_block_body) [31752 31776])
                            ("if" code nil (reparse-symbol indented_block_body) [31785 32067]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31328 31332])
                            ("filename" variable nil (reparse-symbol function_parameters) [31334 31342])
                            ("mode" variable nil (reparse-symbol function_parameters) [31344 31348])
                            ("encoding" variable nil (reparse-symbol function_parameters) [31354 31362])
                            ("delay" variable nil (reparse-symbol function_parameters) [31369 31374]))                          
                        :documentation "
        Open the specified file and use it as the stream for logging.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31315 32067])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32082 32086]))                          
                        :documentation "
        Closes the stream.
        ")
                        (reparse-symbol indented_block_body) [32072 32340])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32355 32359]))                          
                        :documentation "
        Open the current base file with the (original) mode and encoding.
        Return the resulting stream.
        ")
                        (reparse-symbol indented_block_body) [32345 32701])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32715 32719])
                            ("record" variable nil (reparse-symbol function_parameters) [32721 32727]))                          
                        :documentation "
        Emit a record.

        If the stream was not opened because 'delay' was specified in the
        constructor, open it before calling the superclass's emit.
        ")
                        (reparse-symbol indented_block_body) [32706 33031]))                  
                :type "class")
                nil [31187 33031])
            ("PlaceHolder" type
               (:documentation "
    PlaceHolder instances are used in the Manager logger hierarchy to take
    the place of nodes for which no loggers have been defined. This class is
    intended for internal use only and not as part of the public API.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize with the specified logger being a child of this placeholder.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33527 33622])
                            ("self" variable nil (reparse-symbol indented_block_body) [33665 33700]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33503 33507])
                            ("alogger" variable nil (reparse-symbol function_parameters) [33509 33516]))                          
                        :documentation "
        Initialize with the specified logger being a child of this placeholder.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33490 33701])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33717 33721])
                            ("alogger" variable nil (reparse-symbol function_parameters) [33723 33730]))                          
                        :documentation "
        Add the specified logger as a child of this placeholder.
        ")
                        (reparse-symbol indented_block_body) [33706 33990]))                  
                :type "class")
                nil [33221 33990])
            ("_loggerClass" variable nil nil [34056 34075])
            ("setLoggerClass" function
               (:documentation "
    Set the class to be used when instantiating a logger. The class should
    define __init__() such that only a name argument is required, and the
    __init__() should call Logger.__init__()
    "
                :arguments 
                  ( ("klass" variable nil (reparse-symbol function_parameters) [34096 34101]))                  )
                nil [34077 34546])
            ("getLoggerClass" function (:documentation "
    Return the class to be used when instantiating a logger.
    ") nil [34547 34671])
            ("Manager" type
               (:documentation "
    There is [under normal circumstances] just one Manager instance, which
    holds the hierarchy of loggers.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the manager with the root node of the logger hierarchy.
        \"\"\"" code nil (reparse-symbol indented_block_body) [34864 34954])
                            ("self" variable nil (reparse-symbol indented_block_body) [34963 34983])
                            ("self" variable nil (reparse-symbol indented_block_body) [34992 35008])
                            ("self" variable nil (reparse-symbol indented_block_body) [35017 35049])
                            ("self" variable nil (reparse-symbol indented_block_body) [35058 35078])
                            ("self" variable nil (reparse-symbol indented_block_body) [35087 35110]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34839 34843])
                            ("rootnode" variable nil (reparse-symbol function_parameters) [34845 34853]))                          
                        :documentation "
        Initialize the manager with the root node of the logger hierarchy.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34826 35111])
                    ("getLogger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35130 35134])
                            ("name" variable nil (reparse-symbol function_parameters) [35136 35140]))                          
                        :documentation "
        Get a logger with the specified name (channel name), creating it
        if it doesn't yet exist. This name is a dot-separated hierarchical
        name, such as \"a\", \"a.b\", \"a.b.c\" or similar.

        If a PlaceHolder existed for the specified name [i.e. the logger
        didn't exist but a child of it did], replace it with the created
        logger and fix up the parent/child references which pointed to the
        placeholder to now point to the logger.
        ")
                        (reparse-symbol indented_block_body) [35116 36546])
                    ("setLoggerClass" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36570 36574])
                            ("klass" variable nil (reparse-symbol function_parameters) [36576 36581]))                          
                        :documentation "
        Set the class to be used when instantiating a logger with this Manager.
        ")
                        (reparse-symbol indented_block_body) [36551 36920])
                    ("_fixupParents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36943 36947])
                            ("alogger" variable nil (reparse-symbol function_parameters) [36949 36956]))                          
                        :documentation "
        Ensure that there are either loggers or placeholders all the way
        from the specified logger to the root of the logger hierarchy.
        ")
                        (reparse-symbol indented_block_body) [36925 37745])
                    ("_fixupChildren" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37769 37773])
                            ("ph" variable nil (reparse-symbol function_parameters) [37775 37777])
                            ("alogger" variable nil (reparse-symbol function_parameters) [37779 37786]))                          
                        :documentation "
        Ensure that children of the placeholder ph are connected to the
        specified logger.
        ")
                        (reparse-symbol indented_block_body) [37750 38196]))                  
                :type "class")
                nil [34672 38196])
            ("Logger" type
               (:documentation "
    Instances of the Logger class represent a single logging channel. A
    \"logging channel\" indicates an area of an application. Exactly how an
    \"area\" is defined is up to the application developer. Since an
    application can have any number of areas, logging channels are identified
    by a unique string. Application areas can be nested (e.g. an area
    of \"input processing\" might include sub-areas \"read CSV files\", \"read
    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,
    channel names are organized into a namespace hierarchy where levels are
    separated by periods, much like the Java or Python package namespace. So
    in the instance given above, channel names might be \"input\" for the upper
    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.
    There is no arbitrary limit to the depth of nesting.
    "
                :superclasses ("Filterer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the logger with a name and an optional level.
        \"\"\"" code nil (reparse-symbol indented_block_body) [39354 39434])
                            ("Filterer" code nil (reparse-symbol indented_block_body) [39443 39466])
                            ("self" variable nil (reparse-symbol indented_block_body) [39475 39491])
                            ("self" variable nil (reparse-symbol indented_block_body) [39500 39531])
                            ("self" variable nil (reparse-symbol indented_block_body) [39540 39558])
                            ("self" variable nil (reparse-symbol indented_block_body) [39567 39585])
                            ("self" variable nil (reparse-symbol indented_block_body) [39594 39612])
                            ("self" variable nil (reparse-symbol indented_block_body) [39621 39638]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39319 39323])
                            ("name" variable nil (reparse-symbol function_parameters) [39325 39329])
                            ("level" variable nil (reparse-symbol function_parameters) [39331 39336]))                          
                        :documentation "
        Initialize the logger with a name and an optional level.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39306 39639])
                    ("setLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39657 39661])
                            ("level" variable nil (reparse-symbol function_parameters) [39663 39668]))                          
                        :documentation "
        Set the logging level of this logger.
        ")
                        (reparse-symbol indented_block_body) [39644 39781])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39796 39800])
                            ("msg" variable nil (reparse-symbol function_parameters) [39802 39805])
                            ("args" variable nil (reparse-symbol function_parameters) [39807 39812])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39814 39822]))                          
                        :documentation "
        Log 'msg % args' with severity 'DEBUG'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [39786 40167])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40181 40185])
                            ("msg" variable nil (reparse-symbol function_parameters) [40187 40190])
                            ("args" variable nil (reparse-symbol function_parameters) [40192 40197])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40199 40207]))                          
                        :documentation "
        Log 'msg % args' with severity 'INFO'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [40172 40553])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40570 40574])
                            ("msg" variable nil (reparse-symbol function_parameters) [40576 40579])
                            ("args" variable nil (reparse-symbol function_parameters) [40581 40586])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40588 40596]))                          
                        :documentation "
        Log 'msg % args' with severity 'WARNING'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [40558 40951])
                    ("warn" variable nil (reparse-symbol indented_block_body) [40956 40970])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40986 40990])
                            ("msg" variable nil (reparse-symbol function_parameters) [40992 40995])
                            ("args" variable nil (reparse-symbol function_parameters) [40997 41002])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41004 41012]))                          
                        :documentation "
        Log 'msg % args' with severity 'ERROR'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [40976 41356])
                    ("exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41375 41379])
                            ("msg" variable nil (reparse-symbol function_parameters) [41381 41384])
                            ("args" variable nil (reparse-symbol function_parameters) [41386 41391]))                          
                        :documentation "
        Convenience method for logging an ERROR with exception information.
        ")
                        (reparse-symbol indented_block_body) [41361 41537])
                    ("critical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41555 41559])
                            ("msg" variable nil (reparse-symbol function_parameters) [41561 41564])
                            ("args" variable nil (reparse-symbol function_parameters) [41566 41571])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41573 41581]))                          
                        :documentation "
        Log 'msg % args' with severity 'CRITICAL'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.critical(\"Houston, we have a %s\", \"major disaster\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [41542 41938])
                    ("fatal" variable nil (reparse-symbol indented_block_body) [41943 41959])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41973 41977])
                            ("level" variable nil (reparse-symbol function_parameters) [41979 41984])
                            ("msg" variable nil (reparse-symbol function_parameters) [41986 41989])
                            ("args" variable nil (reparse-symbol function_parameters) [41991 41996])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41998 42006]))                          
                        :documentation "
        Log 'msg % args' with the integer severity 'level'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.log(level, \"We have a %s\", \"mysterious problem\", exc_info=1)
        ")
                        (reparse-symbol indented_block_body) [41965 42535])
                    ("findCaller" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42555 42559]))                          
                        :documentation "
        Find the stack frame of the caller so that we can note the source
        file name, line number and function name.
        ")
                        (reparse-symbol indented_block_body) [42540 43264])
                    ("makeRecord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43284 43288])
                            ("name" variable nil (reparse-symbol function_parameters) [43290 43294])
                            ("level" variable nil (reparse-symbol function_parameters) [43296 43301])
                            ("fn" variable nil (reparse-symbol function_parameters) [43303 43305])
                            ("lno" variable nil (reparse-symbol function_parameters) [43307 43310])
                            ("msg" variable nil (reparse-symbol function_parameters) [43312 43315])
                            ("args" variable nil (reparse-symbol function_parameters) [43317 43321])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [43323 43331])
                            ("func" variable nil (reparse-symbol function_parameters) [43333 43337])
                            ("extra" variable nil (reparse-symbol function_parameters) [43344 43349]))                          
                        :documentation "
        A factory method which can be overridden in subclasses to create
        specialized LogRecords.
        ")
                        (reparse-symbol indented_block_body) [43269 43839])
                    ("_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43853 43857])
                            ("level" variable nil (reparse-symbol function_parameters) [43859 43864])
                            ("msg" variable nil (reparse-symbol function_parameters) [43866 43869])
                            ("args" variable nil (reparse-symbol function_parameters) [43871 43875])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [43877 43885])
                            ("extra" variable nil (reparse-symbol function_parameters) [43892 43897]))                          
                        :documentation "
        Low-level logging routine which creates a LogRecord and then calls
        all the handlers of this logger to handle the record.
        ")
                        (reparse-symbol indented_block_body) [43844 44773])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44789 44793])
                            ("record" variable nil (reparse-symbol function_parameters) [44795 44801]))                          
                        :documentation "
        Call the handlers for the specified record.

        This method is used for unpickled records received from a socket, as
        well as those created locally. Logger-level filtering is applied.
        ")
                        (reparse-symbol indented_block_body) [44778 45126])
                    ("addHandler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45146 45150])
                            ("hdlr" variable nil (reparse-symbol function_parameters) [45152 45156]))                          
                        :documentation "
        Add the specified handler to this logger.
        ")
                        (reparse-symbol indented_block_body) [45131 45400])
                    ("removeHandler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45423 45427])
                            ("hdlr" variable nil (reparse-symbol function_parameters) [45429 45433]))                          
                        :documentation "
        Remove the specified handler from this logger.
        ")
                        (reparse-symbol indented_block_body) [45405 45676])
                    ("callHandlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45698 45702])
                            ("record" variable nil (reparse-symbol function_parameters) [45704 45710]))                          
                        :documentation "
        Pass a record to all relevant handlers.

        Loop through all handlers for this logger and its parents in the
        logger hierarchy. If no handler was found, output a one-off error
        message to sys.stderr. Stop searching up the hierarchy whenever a
        logger with the \"propagate\" attribute set to zero is found - that
        will be the last logger whose handlers are called.
        ")
                        (reparse-symbol indented_block_body) [45681 46735])
                    ("getEffectiveLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46762 46766]))                          
                        :documentation "
        Get the effective level for this logger.

        Loop through this logger and its parents in the logger hierarchy,
        looking for a non-zero logging level. Return the first one found.
        ")
                        (reparse-symbol indented_block_body) [46740 47157])
                    ("isEnabledFor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47179 47183])
                            ("level" variable nil (reparse-symbol function_parameters) [47185 47190]))                          
                        :documentation "
        Is this logger enabled for level 'level'?
        ")
                        (reparse-symbol indented_block_body) [47162 47379])
                    ("getChild" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47397 47401])
                            ("suffix" variable nil (reparse-symbol function_parameters) [47403 47409]))                          
                        :documentation "
        Get a logger which is a descendant to this one.

        This is a convenience method, such that

        logging.getLogger('abc').getChild('def.ghi')

        is the same as

        logging.getLogger('abc.def.ghi')

        It's useful, for example, when the parent logger is named using
        __name__ rather than a literal string.
        ")
                        (reparse-symbol indented_block_body) [47384 47912]))                  
                :type "class")
                nil [38385 47912])
            ("RootLogger" type
               (:documentation "
    A root logger is not that different to any other logger, except that
    it must have a logging level and there is only one instance of it in
    the hierarchy.
    "
                :superclasses ("Logger")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the logger with the name \"root\".
        \"\"\"" code nil (reparse-symbol indented_block_body) [48159 48226])
                            ("Logger" code nil (reparse-symbol indented_block_body) [48235 48271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48137 48141])
                            ("level" variable nil (reparse-symbol function_parameters) [48143 48148]))                          
                        :documentation "
        Initialize the logger with the name \"root\".
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48124 48272]))                  
                :type "class")
                nil [47913 48272])
            ("_loggerClass" variable nil nil [48273 48294])
            ("LoggerAdapter" type
               (:documentation "
    An adapter for loggers which makes it easier to specify contextual
    information in logging output.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the adapter with a logger and a dict-like object which
        provides contextual information. This constructor signature allows
        easy stacking of LoggerAdapters, if so desired.

        You can effectively pass keyword arguments as shown in the
        following example:

        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))
        \"\"\"" code nil (reparse-symbol indented_block_body) [48495 48877])
                            ("self" variable nil (reparse-symbol indented_block_body) [48886 48906])
                            ("self" variable nil (reparse-symbol indented_block_body) [48915 48933]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48465 48469])
                            ("logger" variable nil (reparse-symbol function_parameters) [48471 48477])
                            ("extra" variable nil (reparse-symbol function_parameters) [48479 48484]))                          
                        :documentation "
        Initialize the adapter with a logger and a dict-like object which
        provides contextual information. This constructor signature allows
        easy stacking of LoggerAdapters, if so desired.

        You can effectively pass keyword arguments as shown in the
        following example:

        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48452 48934])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48951 48955])
                            ("msg" variable nil (reparse-symbol function_parameters) [48957 48960])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48962 48968]))                          
                        :documentation "
        Process the logging message and keyword arguments passed in to
        a logging call to insert contextual information. You can either
        manipulate the message itself, the keyword args or both. Return
        the message and kwargs modified (or not) to suit your needs.

        Normally, you'll only need to override this one method in a
        LoggerAdapter subclass for your specific needs.
        ")
                        (reparse-symbol indented_block_body) [48939 49468])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49483 49487])
                            ("msg" variable nil (reparse-symbol function_parameters) [49489 49492])
                            ("args" variable nil (reparse-symbol function_parameters) [49494 49499])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49501 49509]))                          
                        :documentation "
        Delegate a debug call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [49473 49760])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49774 49778])
                            ("msg" variable nil (reparse-symbol function_parameters) [49780 49783])
                            ("args" variable nil (reparse-symbol function_parameters) [49785 49790])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49792 49800]))                          
                        :documentation "
        Delegate an info call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [49765 50050])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50067 50071])
                            ("msg" variable nil (reparse-symbol function_parameters) [50073 50076])
                            ("args" variable nil (reparse-symbol function_parameters) [50078 50083])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50085 50093]))                          
                        :documentation "
        Delegate a warning call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50055 50348])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50363 50367])
                            ("msg" variable nil (reparse-symbol function_parameters) [50369 50372])
                            ("args" variable nil (reparse-symbol function_parameters) [50374 50379])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50381 50389]))                          
                        :documentation "
        Delegate an error call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50353 50641])
                    ("exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50660 50664])
                            ("msg" variable nil (reparse-symbol function_parameters) [50666 50669])
                            ("args" variable nil (reparse-symbol function_parameters) [50671 50676])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50678 50686]))                          
                        :documentation "
        Delegate an exception call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50646 50973])
                    ("critical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50991 50995])
                            ("msg" variable nil (reparse-symbol function_parameters) [50997 51000])
                            ("args" variable nil (reparse-symbol function_parameters) [51002 51007])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51009 51017]))                          
                        :documentation "
        Delegate a critical call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [50978 51274])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51287 51291])
                            ("level" variable nil (reparse-symbol function_parameters) [51293 51298])
                            ("msg" variable nil (reparse-symbol function_parameters) [51300 51303])
                            ("args" variable nil (reparse-symbol function_parameters) [51305 51310])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51312 51320]))                          
                        :documentation "
        Delegate a log call to the underlying logger, after adding
        contextual information from this adapter instance.
        ")
                        (reparse-symbol indented_block_body) [51279 51574])
                    ("isEnabledFor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51596 51600])
                            ("level" variable nil (reparse-symbol function_parameters) [51602 51607]))                          
                        :documentation "
        See if the underlying logger is enabled for the specified level.
        ")
                        (reparse-symbol indented_block_body) [51579 51754]))                  
                :type "class")
                nil [48296 51754])
            ("root" variable nil nil [51755 51781])
            ("Logger" variable nil nil [51782 51800])
            ("Logger" variable nil nil [51801 51838])
            ("BASIC_FORMAT" variable nil nil [52033 52084])
            ("basicConfig" function
               (:documentation "
    Do basic configuration for the logging system.

    This function does nothing if the root logger already has handlers
    configured. It is a convenience method intended for use by simple scripts
    to do one-shot configuration of the logging package.

    The default behaviour is to create a StreamHandler which writes to
    sys.stderr, set a formatter using the BASIC_FORMAT format string, and
    add the handler to the root logger.

    A number of optional keyword arguments may be specified, which can alter
    the default behaviour.

    filename  Specifies that a FileHandler be created, using the specified
              filename, rather than a StreamHandler.
    filemode  Specifies the mode to open the file, if filename is specified
              (if filemode is unspecified, it defaults to 'a').
    format    Use the specified format string for the handler.
    datefmt   Use the specified date/time format.
    level     Set the root logger level to the specified level.
    stream    Use the specified stream to initialize the StreamHandler. Note
              that this argument is incompatible with 'filename' - if both
              are present, 'stream' is ignored.

    Note that you could specify a stream created using open(filename, mode)
    rather than passing the filename and mode in. However, it should be
    remembered that StreamHandler does not close its stream (since it may be
    using sys.stdout or sys.stderr), whereas FileHandler closes its stream
    when the handler is closed.
    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [52102 52110]))                  )
                nil [52086 54453])
            ("getLogger" function
               (:documentation "
    Return a logger with the specified name, creating it if necessary.

    If no name is specified, return the root logger.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [54712 54716]))                  )
                nil [54698 54954])
            ("critical" function
               (:documentation "
    Log a message with severity 'CRITICAL' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55180 55183])
                    ("args" variable nil (reparse-symbol function_parameters) [55185 55190])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55192 55200]))                  )
                nil [55167 55376])
            ("fatal" variable nil nil [55377 55393])
            ("error" function
               (:documentation "
    Log a message with severity 'ERROR' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55405 55408])
                    ("args" variable nil (reparse-symbol function_parameters) [55410 55415])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55417 55425]))                  )
                nil [55395 55595])
            ("exception" function
               (:documentation "
    Log a message with severity 'ERROR' on the root logger,
    with exception information.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55610 55613])
                    ("args" variable nil (reparse-symbol function_parameters) [55615 55620]))                  )
                nil [55596 55765])
            ("warning" function
               (:documentation "
    Log a message with severity 'WARNING' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55778 55781])
                    ("args" variable nil (reparse-symbol function_parameters) [55783 55788])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [55790 55798]))                  )
                nil [55766 55972])
            ("warn" variable nil nil [55973 55987])
            ("info" function
               (:documentation "
    Log a message with severity 'INFO' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [55998 56001])
                    ("args" variable nil (reparse-symbol function_parameters) [56003 56008])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56010 56018]))                  )
                nil [55989 56186])
            ("debug" function
               (:documentation "
    Log a message with severity 'DEBUG' on the root logger.
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [56197 56200])
                    ("args" variable nil (reparse-symbol function_parameters) [56202 56207])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56209 56217]))                  )
                nil [56187 56387])
            ("log" function
               (:documentation "
    Log 'msg % args' with the integer severity 'level' on the root logger.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [56396 56401])
                    ("msg" variable nil (reparse-symbol function_parameters) [56403 56406])
                    ("args" variable nil (reparse-symbol function_parameters) [56408 56413])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [56415 56423]))                  )
                nil [56388 56613])
            ("disable" function
               (:documentation "
    Disable all logging calls of severity 'level' and below.
    "
                :arguments 
                  ( ("level" variable nil (reparse-symbol function_parameters) [56626 56631]))                  )
                nil [56614 56744])
            ("shutdown" function
               (:documentation "
    Perform any cleanup actions in the logging system (e.g. flushing
    buffers).

    Should be called at application exit.
    "
                :arguments 
                  ( ("handlerList" variable nil (reparse-symbol function_parameters) [56758 56769]))                  )
                nil [56745 57670])
            ("atexit" include nil nil [57759 57772])
            ("atexit" code nil nil [57773 57798])
            ("NullHandler" type
               (:documentation "
    This handler does nothing. It's intended to be used to avoid the
    \"No handlers could be found for logger XXX\" one-off warning. This is
    important for library code, which may contain code to log events. If a user
    of the library does not configure logging, the one-off warning might be
    produced; to avoid this, the library developer simply needs to instantiate
    a NullHandler and add it to the top-level logger of the library module or
    package.
    "
                :superclasses ("Handler")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58343 58347])
                            ("record" variable nil (reparse-symbol function_parameters) [58349 58355]))                          )
                        (reparse-symbol indented_block_body) [58332 58371])
                    ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58385 58389])
                            ("record" variable nil (reparse-symbol function_parameters) [58391 58397]))                          )
                        (reparse-symbol indented_block_body) [58376 58413])
                    ("createLock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58433 58437]))                          )
                        (reparse-symbol indented_block_body) [58418 58465]))                  
                :type "class")
                nil [57816 58465])
            ("_warnings_showwarning" variable nil nil [58490 58518])
            ("_showwarning" function
               (:documentation "
    Implementation of showwarnings which redirects to logging, which will first
    check to see if the file parameter is None. If a file is specified, it will
    delegate to the original warnings implementation of showwarning. Otherwise,
    it will call warnings.formatwarning and will log the resulting string to a
    warnings logger named \"py.warnings\" with level logging.WARNING.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [58537 58544])
                    ("category" variable nil (reparse-symbol function_parameters) [58546 58554])
                    ("filename" variable nil (reparse-symbol function_parameters) [58556 58564])
                    ("lineno" variable nil (reparse-symbol function_parameters) [58566 58572])
                    ("file" variable nil (reparse-symbol function_parameters) [58574 58578])
                    ("line" variable nil (reparse-symbol function_parameters) [58585 58589]))                  )
                nil [58520 59393])
            ("captureWarnings" function
               (:documentation "
    If capture is true, redirect all warnings to the logging package.
    If capture is False, ensure that warnings are not redirected to logging
    but to their original destinations.
    "
                :arguments 
                  ( ("capture" variable nil (reparse-symbol function_parameters) [59414 59421]))                  )
                nil [59394 59976]))          
    :file "__init__.py"
    :pointmax 59976
    :fsize 59975
    :lastmodtime '(21263 40996 0 0)
    :unmatched-syntax '((INDENT_BLOCK 57568 . 57600) (NEWLINE 57567 . 57568) (COLON 57566 . 57567) (FINALLY 57559 . 57566) (INDENT_BLOCK 28627 . 28650) (NEWLINE 28626 . 28627) (COLON 28625 . 28626) (FINALLY 28618 . 28625))
    )
   )
  :file "!usr!lib!python2.7!logging!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )

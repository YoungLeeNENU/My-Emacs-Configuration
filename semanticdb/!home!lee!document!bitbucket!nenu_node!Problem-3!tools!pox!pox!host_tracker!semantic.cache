;; Object host_tracker/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "host_tracker/"
  :tables (list 
   (semanticdb-table "host_tracker.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Keep track of hosts in the network, where they are and how they are
configured (at least MAC/IP addresses)

For the time being, it keeps tables with the information; later, it should
transfer that information to Topology and handle just the actual
discovery/update of host information.

Timer configuration can be changed when needed (e.g., for debugging) using
the launch facility (check timeoutSec dict and PingCtrl.pingLim).
\"\"\"" code nil nil [748 1183])
            ("pox.core" include nil nil [1185 1210])
            ("pox" include nil nil [1211 1221])
            ("log" variable nil nil [1222 1244])
            ("pox.lib.packet.ethernet" include nil nil [1291 1335])
            ("pox.lib.packet.ipv4" include nil nil [1336 1372])
            ("pox.lib.packet.arp" include nil nil [1373 1407])
            ("pox.lib.recoco.recoco" include nil nil [1409 1448])
            ("pox.openflow.libopenflow_01" include nil nil [1450 1490])
            ("pox.openflow.discovery" include nil nil [1492 1534])
            ("pox.lib.revent.revent" include nil nil [1536 1571])
            ("time" include nil nil [1573 1584])
            ("string" include nil nil [1586 1599])
            ("timeoutSec" variable nil nil [1653 2014])
            ("Alive" type
               (:documentation " Holds liveliness information for MAC and IP entries
  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2310 2341])
                            ("self" variable nil (reparse-symbol indented_block_body) [2346 2378]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2256 2260])
                            ("livelinessInterval" variable nil (reparse-symbol function_parameters) [2262 2280]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2242 2379])
                    ("expired" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2397 2401]))                          )
                        (reparse-symbol indented_block_body) [2384 2463])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2479 2483]))                          )
                        (reparse-symbol indented_block_body) [2466 2522]))                  
                :type "class")
                nil [2154 2522])
            ("PingCtrl" type
               (:documentation " Holds information for handling ARP pings for hosts
  "
                :superclasses ("Alive")
                :members 
                  ( ("pingLim" variable nil (reparse-symbol indented_block_body) [2670 2679])
                    ("__init__" function
                       (:suite 
                          ( ("Alive" code nil (reparse-symbol indented_block_body) [2708 2752])
                            ("self" variable nil (reparse-symbol indented_block_body) [2757 2773]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2697 2701]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2683 2774])
                    ("sent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2787 2791]))                          )
                        (reparse-symbol indented_block_body) [2777 2835])
                    ("failed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2850 2854]))                          )
                        (reparse-symbol indented_block_body) [2838 2900])
                    ("received" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2917 2921]))                          )
                        (reparse-symbol indented_block_body) [2903 2999]))                  
                :type "class")
                nil [2524 2999])
            ("IpEntry" type
               (:documentation "
  This entry keeps track of IP addresses seen from each MAC entry and will
  be kept in the macEntry object's ipAddrs dictionary. At least for now,
  there is no need to refer to the original macEntry as the code is organized.
  "
                :superclasses ("Alive")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [3298 3420])
                            ("self" variable nil (reparse-symbol indented_block_body) [3424 3444])
                            ("self" variable nil (reparse-symbol indented_block_body) [3449 3472]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3279 3283])
                            ("hasARP" variable nil (reparse-symbol function_parameters) [3285 3291]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3265 3473])
                    ("setHasARP" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3491 3495]))                          )
                        (reparse-symbol indented_block_body) [3476 3592]))                  
                :type "class")
                nil [3001 3592])
            ("MacEntry" type
               (:documentation "
  Not strictly an ARP entry.
  When it gets moved to Topology, may include other host info, like
  services, and it may replace dpid by a general switch object reference
  We use the port to determine which port to forward traffic out of.
  "
                :superclasses ("Alive")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Alive" code nil (reparse-symbol indented_block_body) [3917 3937])
                            ("self" variable nil (reparse-symbol indented_block_body) [3942 3958])
                            ("self" variable nil (reparse-symbol indented_block_body) [3963 3979])
                            ("self" variable nil (reparse-symbol indented_block_body) [3984 4006])
                            ("self" variable nil (reparse-symbol indented_block_body) [4011 4028]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3885 3889])
                            ("dpid" variable nil (reparse-symbol function_parameters) [3891 3895])
                            ("port" variable nil (reparse-symbol function_parameters) [3897 3901])
                            ("macaddr" variable nil (reparse-symbol function_parameters) [3903 3910]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3871 4029])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4044 4048]))                          )
                        (reparse-symbol indented_block_body) [4032 4131])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4146 4150])
                            ("other" variable nil (reparse-symbol function_parameters) [4152 4157]))                          )
                        (reparse-symbol indented_block_body) [4134 4435])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4450 4454])
                            ("other" variable nil (reparse-symbol function_parameters) [4456 4461]))                          )
                        (reparse-symbol indented_block_body) [4438 4498]))                  
                :type "class")
                nil [3594 4498])
            ("host_tracker" type
               (:superclasses ("EventMixin")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4620 4640])
                            ("self" variable nil (reparse-symbol indented_block_body) [4645 4746])
                            ("self" code nil (reparse-symbol indented_block_body) [4751 4770])
                            ("log" code nil (reparse-symbol indented_block_body) [4775 4805]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4549 4553]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4535 4806])
                    ("getMacEntry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4884 4888])
                            ("macaddr" variable nil (reparse-symbol function_parameters) [4890 4897]))                          )
                        (reparse-symbol indented_block_body) [4868 5013])
                    ("sendPing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5029 5033])
                            ("macEntry" variable nil (reparse-symbol function_parameters) [5035 5043])
                            ("ipAddr" variable nil (reparse-symbol function_parameters) [5045 5051]))                          )
                        (reparse-symbol indented_block_body) [5016 5912])
                    ("getSrcIPandARP" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5934 5938])
                            ("packet" variable nil (reparse-symbol function_parameters) [5940 5946]))                          
                        :documentation "
    This auxiliary function returns the source IPv4 address for packets that
    have one (IPv4, ARPv4). Returns None otherwise.
    ")
                        (reparse-symbol indented_block_body) [5915 6690])
                    ("updateIPInfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6710 6714])
                            ("pckt_srcip" variable nil (reparse-symbol function_parameters) [6716 6726])
                            ("macEntry" variable nil (reparse-symbol function_parameters) [6728 6736])
                            ("hasARP" variable nil (reparse-symbol function_parameters) [6738 6744]))                          
                        :documentation " If there is IP info in the incoming packet, update the macEntry
    accordingly. In the past we assumed a 1:1 mapping between MAC and IP
    addresses, but removed that restriction later to accomodate cases 
    like virtual interfaces (1:n) and distributed packet rewriting (n:1)
    ")
                        (reparse-symbol indented_block_body) [6693 7515])
                    ("_handle_GoingUpEvent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7544 7548])
                            ("event" variable nil (reparse-symbol function_parameters) [7550 7555]))                          )
                        (reparse-symbol indented_block_body) [7518 7614])
                    ("_handle_PacketIn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7639 7643])
                            ("event" variable nil (reparse-symbol function_parameters) [7645 7650]))                          
                        :documentation "
    Populate MAC and IP tables based on incoming packets.
    Handles only packets from ports identified as not switch-only.
    If a MAC was not seen before, insert it in the MAC table;
    otherwise, update table and enry.
    If packet has a source IP, update that info for the macEntry (may require
    removing the info from antoher entry previously with that IP address).
    It does not forward any packets, just extract info from them.
    ")
                        (reparse-symbol indented_block_body) [7617 10031])
                    ("_check_timeouts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058]))                          )
                        (reparse-symbol indented_block_body) [10034 10988]))                  
                :type "class")
                nil [4500 10988]))          
    :file "host_tracker.py"
    :pointmax 10988
    :fsize 10987
    :lastmodtime '(21344 58702 748984 346000)
    :unmatched-syntax '((INDENT_BLOCK 4975 . 4995) (NEWLINE 4974 . 4975) (COLON 4973 . 4974) (TRY 4904 . 4907) (AS 4969 . 4971))
    )
   )
  :file "!home!lee!document!bitbucket!nenu_node!Problem-3!tools!pox!pox!host_tracker!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
